// RECOVERY SCHEMA - Add these to your schema.ts file
// Generated from orphaned database columns

// Add to admin_prompt_reviews table:
  prompt_id: text("prompt_id"),
  reviewer_id: integer("reviewer_id"),
  review_status: text("review_status"),
  feedback: text("feedback"),

// Add to allergies table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  allergen: text("allergen"),
  reaction: text("reaction"),
  severity: text("severity"),
  onset_date: date("onset_date"),
  notes: text("notes"),
  status: text("status").default('active'::text),
  verified_by: integer("verified_by"),
  verified_at: timestamp("verified_at"),
  source_type: text("source_type").default('patient_reported'::text),
  source_confidence: decimal("source_confidence"),
  source_timestamp: timestamp("source_timestamp"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  allergy_type: text("allergy_type").default('drug'::text),
  reaction_type: text("reaction_type"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),
  last_reaction: date("last_reaction"),
  last_reaction_date: date("last_reaction_date"),
  verification_status: text("verification_status").default('unconfirmed'::text),
  drug_class: text("drug_class"),
  cross_reactivity: text("cross_reactivity"),
  source_notes: text("source_notes"),
  entered_by: integer("entered_by"),
  temporal_conflict_resolution: text("temporal_conflict_resolution"),
  last_updated_encounter: integer("last_updated_encounter"),

// Add to appointment_duration_history table:
  appointment_id: integer("appointment_id"),
  predicted_duration: integer("predicted_duration"),
  actual_duration: integer("actual_duration"),

// Add to appointment_resource_requirements table:
  appointment_type_id: integer("appointment_type_id"),
  resource_type: text("resource_type"),
  resource_id: integer("resource_id"),

// Add to appointment_types table:
  health_system_id: integer("health_system_id"),
  name: text("name"),
  duration_minutes: integer("duration_minutes"),
  color: text("color"),
  description: text("description"),
  is_active: boolean("is_active").default(true),

// Add to appointments table:
  patient_id: integer("patient_id"),
  provider_id: integer("provider_id"),
  location_id: integer("location_id"),
  appointment_type_id: integer("appointment_type_id"),
  start_time: timestamp("start_time"),
  end_time: timestamp("end_time"),
  duration_minutes: integer("duration_minutes"),
  ai_predicted_duration: integer("ai_predicted_duration"),
  status: text("status").default('scheduled'::character varying),
  chief_complaint: text("chief_complaint"),
  notes: text("notes"),
  checked_in_at: timestamp("checked_in_at"),
  checked_in_by: integer("checked_in_by"),
  completed_at: timestamp("completed_at"),
  completed_by: integer("completed_by"),
  cancelled_at: timestamp("cancelled_at"),
  cancelled_by: integer("cancelled_by"),
  cancellation_reason: text("cancellation_reason"),
  duration: integer("duration").default(20),
  patient_visible_duration: integer("patient_visible_duration"),
  actual_duration: integer("actual_duration"),
  use_ai_scheduling: boolean("use_ai_scheduling").default(true),
  resource_requirements: text("resource_requirements").default('[]'::jsonb),
  tags: text("tags"),
  insurance_verified: boolean("insurance_verified").default(false),
  insurance_verification_notes: text("insurance_verification_notes"),
  copay_collected: boolean("copay_collected").default(false),
  copay_amount: decimal("copay_amount"),
  forms_completed: boolean("forms_completed").default(false),
  vital_signs_taken: boolean("vital_signs_taken").default(false),
  room_number: text("room_number"),
  intake_completed_at: timestamp("intake_completed_at"),
  provider_ready_at: timestamp("provider_ready_at"),
  visit_completed_at: timestamp("visit_completed_at"),
  no_show_reason: text("no_show_reason"),
  late_cancellation_reason: text("late_cancellation_reason"),
  rescheduled_from: integer("rescheduled_from"),
  rescheduled_reason: text("rescheduled_reason"),
  parent_appointment_id: integer("parent_appointment_id"),
  recurrence_rule: text("recurrence_rule"),
  recurrence_exceptions: text("recurrence_exceptions"),
  reminder_sent: boolean("reminder_sent").default(false),
  reminder_sent_at: timestamp("reminder_sent_at"),
  confirmation_sent: boolean("confirmation_sent").default(false),
  confirmation_sent_at: timestamp("confirmation_sent_at"),
  patient_confirmed: boolean("patient_confirmed").default(false),
  patient_confirmed_at: timestamp("patient_confirmed_at"),
  wait_list_priority: integer("wait_list_priority"),
  referring_provider: text("referring_provider"),
  referral_reason: text("referral_reason"),
  interpreter_needed: boolean("interpreter_needed").default(false),
  interpreter_language: text("interpreter_language"),
  wheelchair_accessible: boolean("wheelchair_accessible").default(false),
  special_instructions: text("special_instructions"),
  pre_appointment_notes: text("pre_appointment_notes"),
  post_appointment_notes: text("post_appointment_notes"),
  billing_notes: text("billing_notes"),
  chart_reviewed: boolean("chart_reviewed").default(false),
  labs_reviewed: boolean("labs_reviewed").default(false),
  images_reviewed: boolean("images_reviewed").default(false),
  medications_reconciled: boolean("medications_reconciled").default(false),
  problems_reviewed: boolean("problems_reviewed").default(false),

// Add to article_comments table:
  article_id: integer("article_id"),
  author_name: text("author_name"),
  author_email: text("author_email"),
  content: text("content"),
  is_approved: boolean("is_approved").default(false),
  parent_id: integer("parent_id"),

// Add to article_generation_queue table:
  topic: text("topic"),
  category: text("category"),
  target_audience: text("target_audience"),
  keywords: text("keywords"),
  competitor_mentions: text("competitor_mentions"),
  research_sources: text("research_sources"),
  status: text("status").default('pending'::text),
  generated_article_id: integer("generated_article_id"),
  error: text("error"),
  processed_at: timestamp("processed_at"),
  custom_prompt: text("custom_prompt"),

// Add to article_revisions table:
  article_id: integer("article_id"),
  content: text("content"),
  revision_note: text("revision_note"),
  revision_type: text("revision_type"),
  created_by: integer("created_by"),

// Add to articles table:
  title: text("title"),
  slug: text("slug"),
  content: text("content"),
  excerpt: text("excerpt"),
  category: text("category"),
  status: text("status").default('draft'::text),
  author_name: text("author_name").default('Clarafi Team'::text),
  featured_image: text("featured_image"),
  meta_title: text("meta_title"),
  meta_description: text("meta_description"),
  keywords: text("keywords"),
  target_audience: text("target_audience"),
  reading_time: integer("reading_time"),
  view_count: integer("view_count").default(0),
  published_at: timestamp("published_at"),
  scheduled_for: timestamp("scheduled_for"),
  generated_at: timestamp("generated_at").default(now()),
  reviewed_at: timestamp("reviewed_at"),
  reviewed_by: integer("reviewed_by"),

// Add to asymmetric_scheduling_config table:
  provider_id: integer("provider_id"),
  weekday_schedule: text("weekday_schedule"),
  custom_rules: text("custom_rules"),
  effective_date: date("effective_date"),

// Add to attachment_extracted_content table:
  attachment_id: integer("attachment_id"),
  page_number: integer("page_number"),
  content_type: text("content_type"),
  extracted_text: text("extracted_text"),
  structured_data: text("structured_data"),
  confidence_score: decimal("confidence_score"),
  extraction_method: text("extraction_method"),
  ai_generated_title: text("ai_generated_title"),
  document_type: text("document_type"),
  processing_status: text("processing_status").default('completed'::text),
  error_message: text("error_message"),
  processed_at: timestamp("processed_at"),

// Add to authentication_logs table:
  user_id: integer("user_id"),
  username: text("username"),
  event_type: text("event_type"),
  success: boolean("success"),
  ip_address: text("ip_address"),
  user_agent: text("user_agent"),
  error_message: text("error_message"),
  email: text("email"),
  health_system_id: integer("health_system_id"),
  failure_reason: text("failure_reason"),

// Add to clinic_admin_verifications table:
  organization_name: text("organization_name"),
  applicant_first_name: text("applicant_first_name"),
  applicant_last_name: text("applicant_last_name"),
  applicant_email: text("applicant_email"),
  applicant_phone: text("applicant_phone"),
  address_street: text("address_street"),
  address_city: text("address_city"),
  address_state: text("address_state"),
  address_zip: text("address_zip"),
  website: text("website"),
  preferred_ehr_tier: integer("preferred_ehr_tier").default(1),
  verification_status: text("verification_status").default('pending'::text),
  verification_score: decimal("verification_score"),
  verification_details: text("verification_details"),
  risk_assessment: text("risk_assessment"),
  automated_decision: text("automated_decision"),
  automated_recommendations: text("automated_recommendations"),
  manual_review_notes: text("manual_review_notes"),
  reviewer_id: integer("reviewer_id"),
  reviewed_at: timestamp("reviewed_at"),
  api_verification_results: text("api_verification_results"),

// Add to data_modification_logs table:
  user_id: integer("user_id"),
  table_name: text("table_name"),
  record_id: integer("record_id"),
  action: text("action"),
  old_values: text("old_values"),
  new_values: text("new_values"),
  reason: text("reason"),
  ip_address: text("ip_address"),
  user_agent: text("user_agent"),

// Add to diagnoses table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  diagnosis_code: text("diagnosis_code"),
  diagnosis_description: text("diagnosis_description"),
  diagnosis_type: text("diagnosis_type"),
  status: text("status"),
  onset_date: date("onset_date"),
  resolution_date: date("resolution_date"),
  notes: text("notes"),
  severity: text("severity"),
  clinician_id: integer("clinician_id"),
  claim_submission_status: text("claim_submission_status"),
  claim_id: text("claim_id"),
  clearinghouse_id: text("clearinghouse_id"),
  payer_id: text("payer_id"),
  allowed_amount: decimal("allowed_amount"),
  paid_amount: decimal("paid_amount"),
  patient_responsibility: decimal("patient_responsibility"),
  adjustment_amount: decimal("adjustment_amount"),
  denial_reason: text("denial_reason"),
  denial_code: text("denial_code"),
  appeal_status: text("appeal_status"),
  appeal_deadline: text("appeal_deadline"),
  billing_notes: text("billing_notes"),
  last_billing_action: text("last_billing_action"),
  assigned_biller: integer("assigned_biller"),
  modifier_applied: text("modifier_applied"),
  billing_action_date: timestamp("billing_action_date"),

// Add to document_processing_queue table:
  attachment_id: integer("attachment_id"),
  status: text("status").default('pending'::text),
  priority: integer("priority").default(100),
  processor_type: text("processor_type"),
  processing_metadata: text("processing_metadata"),
  error_message: text("error_message"),
  retry_count: integer("retry_count").default(0),
  started_at: timestamp("started_at"),
  completed_at: timestamp("completed_at"),

// Add to email_notifications table:
  recipient_email: text("recipient_email"),
  subject: text("subject"),
  body_html: text("body_html"),
  body_text: text("body_text"),
  notification_type: text("notification_type"),
  related_user_id: integer("related_user_id"),
  related_entity_type: text("related_entity_type"),
  related_entity_id: integer("related_entity_id"),
  status: text("status").default('pending'::text),
  sent_at: timestamp("sent_at"),
  error_message: text("error_message"),
  retry_count: integer("retry_count").default(0),

// Add to emergency_access_logs table:
  user_id: integer("user_id"),
  patient_id: integer("patient_id"),
  access_reason: text("access_reason"),
  emergency_type: text("emergency_type"),
  override_restrictions: text("override_restrictions"),
  supervisor_approval: integer("supervisor_approval"),
  access_duration: integer("access_duration"),
  ip_address: text("ip_address"),

// Add to encounters table:
  patient_id: integer("patient_id"),
  provider_id: integer("provider_id"),
  encounter_date: timestamp("encounter_date").default(CURRENT_TIMESTAMP),
  encounter_type: text("encounter_type"),
  visit_reason: text("visit_reason"),
  status: text("status").default('in-progress'::character varying),
  location: text("location"),
  insurance_verified: boolean("insurance_verified").default(false),
  copay_collected: decimal("copay_collected"),
  notes: text("notes"),
  encounter_subtype: text("encounter_subtype"),
  encounter_status: text("encounter_status").default('scheduled'::text),
  end_time: timestamp("end_time"),
  location_id: integer("location_id"),
  chief_complaint: text("chief_complaint"),
  ai_scribe_mode: text("ai_scribe_mode").default('smart_dictation'::text),
  ai_suggestions: text("ai_suggestions").default('{}'::jsonb),
  signed_by: integer("signed_by"),
  signed_at: timestamp("signed_at"),
  is_signed: boolean("is_signed").default(false),
  appointment_id: integer("appointment_id"),
  start_time: timestamp("start_time"),
  note: text("note"),
  nurse_assessment: text("nurse_assessment"),
  nurse_interventions: text("nurse_interventions"),
  nurse_notes: text("nurse_notes"),
  transcription_id: text("transcription_id"),
  assistant_thread_id: text("assistant_thread_id"),
  voice_recording_url: text("voice_recording_url"),
  alerts: text("alerts").default('[]'::jsonb),
  transcription_raw: text("transcription_raw"),
  transcription_processed: text("transcription_processed"),
  draft_orders: text("draft_orders").default('[]'::jsonb),
  draft_diagnoses: text("draft_diagnoses").default('[]'::jsonb),
  cpt_codes: text("cpt_codes").default('[]'::jsonb),
  signature_id: text("signature_id"),
  last_chart_update: timestamp("last_chart_update"),
  chart_update_duration: integer("chart_update_duration"),
  discharge_summary: text("discharge_summary"),
  referral_source: text("referral_source"),
  estimated_copay: decimal("estimated_copay"),
  billing_status: text("billing_status"),
  claim_number: text("claim_number"),
  primary_diagnosis_code: text("primary_diagnosis_code"),
  reimbursement_amount: decimal("reimbursement_amount"),
  template_id: integer("template_id"),

// Add to external_labs table:
  patient_id: integer("patient_id"),
  lab_name: text("lab_name"),
  test_name: text("test_name"),
  test_date: date("test_date"),
  result_value: text("result_value"),
  unit: text("unit"),
  reference_range: text("reference_range"),
  abnormal_flag: text("abnormal_flag"),
  ordering_provider: text("ordering_provider"),
  status: text("status"),
  attachment_id: integer("attachment_id"),

// Add to family_history table:
  patient_id: integer("patient_id"),
  relationship: text("relationship"),
  condition: text("condition"),
  age_at_onset: integer("age_at_onset"),
  age_at_death: integer("age_at_death"),
  cause_of_death: text("cause_of_death"),
  notes: text("notes"),
  source_type: text("source_type").default('patient_reported'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  maternal_side: boolean("maternal_side"),
  living_status: text("living_status"),
  genetic_marker: text("genetic_marker"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),

// Add to gpt_lab_review_notes table:
  patient_id: integer("patient_id"),
  lab_order_id: integer("lab_order_id"),
  review_type: text("review_type"),
  ai_interpretation: text("ai_interpretation"),
  clinical_significance: text("clinical_significance"),
  follow_up_recommendations: text("follow_up_recommendations"),
  risk_assessment: text("risk_assessment"),
  reviewed_by: integer("reviewed_by"),
  review_status: text("review_status").default('pending'::text),

// Add to health_systems table:
  name: text("name"),
  type: text("type"),
  subscription_tier: integer("subscription_tier").default(1),
  subscription_status: text("subscription_status").default('active'::character varying),
  subscription_key: text("subscription_key"),
  is_migration: boolean("is_migration").default(false),
  stripe_customer_id: text("stripe_customer_id"),
  metadata: text("metadata").default('{}'::jsonb),
  short_name: text("short_name"),
  system_type: text("system_type"),
  subscription_start_date: timestamp("subscription_start_date"),
  subscription_end_date: timestamp("subscription_end_date"),
  merged_into_health_system_id: integer("merged_into_health_system_id"),
  merged_date: timestamp("merged_date"),
  original_provider_id: integer("original_provider_id"),
  primary_contact: text("primary_contact"),
  phone: text("phone"),
  email: text("email"),
  website: text("website"),
  npi: text("npi"),
  tax_id: text("tax_id"),
  logo_url: text("logo_url"),
  brand_colors: text("brand_colors"),
  subscription_limits: text("subscription_limits").default('{"staffKeys": 0, "totalUsers": 0, "providerKeys": 0}'::jsonb),
  active_user_count: text("active_user_count").default('{"providers": 0, "adminStaff": 0, "lastUpdated": "2025-01-16T00:00:00.000Z", "clinicalStaff": 0}'::jsonb),
  billing_details: text("billing_details").default('{"monthlyTotal": 0, "providerRate": 399, "adminStaffRate": 49, "clinicalStaffRate": 99}'::jsonb),
  active: boolean("active").default(true),
  status: text("status").default('active'::text),

// Add to imaging_orders table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  provider_id: integer("provider_id"),
  imaging_type: text("imaging_type"),
  body_part: text("body_part"),
  laterality: text("laterality"),
  indication: text("indication"),
  clinical_history: text("clinical_history"),
  priority: text("priority").default('routine'::text),
  status: text("status").default('pending'::text),
  facility_id: integer("facility_id"),
  scheduled_date: timestamp("scheduled_date"),
  completed_date: timestamp("completed_date"),

// Add to imaging_results table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  imaging_order_id: integer("imaging_order_id"),
  study_type: text("study_type"),
  body_part: text("body_part"),
  modality: text("modality"),
  study_date: timestamp("study_date"),
  accession_number: text("accession_number"),
  performing_facility: text("performing_facility"),
  ordering_provider_id: integer("ordering_provider_id"),
  reading_radiologist: text("reading_radiologist"),
  findings: text("findings"),
  impression: text("impression"),
  recommendations: text("recommendations"),
  comparison_studies: text("comparison_studies"),
  technique: text("technique"),
  contrast_used: boolean("contrast_used").default(false),
  contrast_type: text("contrast_type"),
  radiation_dose: text("radiation_dose"),
  number_of_images: integer("number_of_images"),
  critical_findings: boolean("critical_findings").default(false),
  critical_findings_communicated_at: timestamp("critical_findings_communicated_at"),
  report_status: text("report_status").default('preliminary'::text),
  report_finalized_at: timestamp("report_finalized_at"),
  addendum: text("addendum"),
  addendum_date: timestamp("addendum_date"),
  procedure_code: text("procedure_code"),
  diagnostic_quality: text("diagnostic_quality"),
  limitations: text("limitations"),
  follow_up_needed: boolean("follow_up_needed").default(false),
  follow_up_timeframe: text("follow_up_timeframe"),
  bi_rads_score: text("bi_rads_score"),
  lung_rads_score: text("lung_rads_score"),
  ti_rads_score: text("ti_rads_score"),
  pi_rads_score: text("pi_rads_score"),
  liver_rads_score: text("liver_rads_score"),
  incidental_findings: text("incidental_findings"),
  relevant_history: text("relevant_history"),
  clinical_indication: text("clinical_indication"),
  protocol_name: text("protocol_name"),
  series_count: integer("series_count"),
  image_count: integer("image_count"),
  study_size_mb: decimal("study_size_mb"),
  pacs_study_uid: text("pacs_study_uid"),
  dicom_retrieval_url: text("dicom_retrieval_url"),
  external_system_id: text("external_system_id"),
  source_type: text("source_type").default('manual_entry'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),

// Add to lab_orders table:
  order_id: integer("order_id"),
  external_order_id: text("external_order_id"),
  transmitted_at: timestamp("transmitted_at"),
  acknowledged_at: timestamp("acknowledged_at"),
  result_received_at: timestamp("result_received_at"),
  status: text("status").default('pending'::text),
  transmission_response: text("transmission_response"),
  result_data: text("result_data"),
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  order_set_id: text("order_set_id"),
  loinc_code: text("loinc_code"),
  provider_id: integer("provider_id"),
  test_name: text("test_name"),
  cpt_code: text("cpt_code"),
  test_code: text("test_code"),
  test_category: text("test_category"),
  priority: text("priority").default('routine'::text),
  clinical_indication: text("clinical_indication"),
  icd10_codes: text("icd10_codes"),
  ordered_by: integer("ordered_by"),
  ordered_at: timestamp("ordered_at"),
  target_lab_id: text("target_lab_id"),
  hl7_message_id: text("hl7_message_id"),
  requisition_number: text("requisition_number"),
  order_status: text("order_status").default('pending'::text),
  collected_at: timestamp("collected_at"),
  specimen_type: text("specimen_type"),
  specimen_volume: text("specimen_volume"),
  specimen_source: text("specimen_source"),
  fasting_required: boolean("fasting_required").default(false),
  special_instructions: text("special_instructions"),
  container_type: text("container_type"),
  collection_site: text("collection_site"),
  collected_by: integer("collected_by"),
  external_lab: text("external_lab"),
  result_status: text("result_status").default('pending'::text),
  collection_instructions: text("collection_instructions"),
  reference_range: text("reference_range"),
  expected_turnaround: text("expected_turnaround"),
  external_status: text("external_status"),
  results: text("results"),
  abnormal_flags: text("abnormal_flags"),
  fasting_hours: integer("fasting_hours"),
  discontinued_at: timestamp("discontinued_at"),
  discontinued_by: integer("discontinued_by"),
  discontinued_reason: text("discontinued_reason"),
  critical_values: text("critical_values"),
  stat_order: boolean("stat_order").default(false),
  timing_instructions: text("timing_instructions"),
  provider_notes: text("provider_notes"),
  patient_preparation: text("patient_preparation"),
  collection_priority: text("collection_priority").default('routine'::text),
  processing_notes: text("processing_notes"),
  billing_code: text("billing_code"),
  insurance_preauth: text("insurance_preauth"),
  insurance_preauth_date: timestamp("insurance_preauth_date"),
  estimated_cost: decimal("estimated_cost"),
  actual_cost: decimal("actual_cost"),
  patient_consent: boolean("patient_consent").default(false),
  consent_date: timestamp("consent_date"),
  insurance_coverage: text("insurance_coverage"),
  patient_copay: decimal("patient_copay"),
  billing_status: text("billing_status").default('pending'::text),
  billing_date: timestamp("billing_date"),
  cancellation_reason: text("cancellation_reason"),
  result_interpretation: text("result_interpretation"),
  ai_suggested_tests: text("ai_suggested_tests"),
  ai_analysis: text("ai_analysis"),
  result_notification_sent: boolean("result_notification_sent").default(false),
  result_notification_date: timestamp("result_notification_date"),
  performing_lab_id: integer("performing_lab_id"),
  lab_account_number: text("lab_account_number"),
  risk_flags: text("risk_flags"),
  quality_control_status: text("quality_control_status"),
  quality_control_notes: text("quality_control_notes"),
  repeat_test_reason: text("repeat_test_reason"),
  original_order_id: integer("original_order_id"),
  test_methodology: text("test_methodology"),
  quality_measure: text("quality_measure"),
  processing_lab_name: text("processing_lab_name"),
  processing_lab_director: text("processing_lab_director"),
  test_validation_status: text("test_validation_status"),
  regulatory_compliance: text("regulatory_compliance"),
  sample_rejection_reason: text("sample_rejection_reason"),
  preventive_care_flag: boolean("preventive_care_flag").default(false),
  clinical_trial_id: text("clinical_trial_id"),
  research_study_id: text("research_study_id"),
  patient_location: text("patient_location"),
  ordering_facility_id: integer("ordering_facility_id"),
  test_performed_at: text("test_performed_at"),

// Add to lab_reference_ranges table:
  test_code: text("test_code"),
  test_name: text("test_name"),
  age_min: integer("age_min"),
  age_max: integer("age_max"),
  gender: text("gender"),
  reference_low: decimal("reference_low"),
  reference_high: decimal("reference_high"),
  critical_low: decimal("critical_low"),
  critical_high: decimal("critical_high"),
  unit: text("unit"),
  notes: text("notes"),

// Add to lab_results table:
  lab_order_id: integer("lab_order_id"),
  patient_id: integer("patient_id"),
  loinc_code: text("loinc_code"),
  test_code: text("test_code"),
  test_name: text("test_name"),
  test_category: text("test_category"),
  result_value: text("result_value"),
  result_numeric: decimal("result_numeric"),
  result_units: text("result_units"),
  reference_range: text("reference_range"),
  age_gender_adjusted_range: text("age_gender_adjusted_range"),
  abnormal_flag: text("abnormal_flag"),
  critical_flag: boolean("critical_flag").default(false),
  delta_flag: text("delta_flag"),
  specimen_collected_at: timestamp("specimen_collected_at"),
  specimen_received_at: timestamp("specimen_received_at"),
  result_available_at: timestamp("result_available_at"),
  result_finalized_at: timestamp("result_finalized_at"),
  received_at: timestamp("received_at").default(now()),
  external_lab_id: integer("external_lab_id"),
  external_result_id: text("external_result_id"),
  hl7_message_id: text("hl7_message_id"),
  instrument_id: text("instrument_id"),
  result_status: text("result_status").default('pending'::text),
  verification_status: text("verification_status").default('unverified'::text),
  result_comments: text("result_comments"),
  reviewed_by: integer("reviewed_by"),
  reviewed_at: timestamp("reviewed_at"),
  provider_notes: text("provider_notes"),
  needs_review: boolean("needs_review").default(true),
  review_status: text("review_status").default('pending'::text),
  review_note: text("review_note"),
  review_template: text("review_template"),
  review_history: text("review_history").default('[]'::jsonb),
  patient_communication_sent: boolean("patient_communication_sent").default(false),
  patient_communication_method: text("patient_communication_method"),
  patient_communication_sent_at: timestamp("patient_communication_sent_at"),
  patient_notified_by: integer("patient_notified_by"),
  patient_message: text("patient_message"),
  patient_message_sent_at: timestamp("patient_message_sent_at"),
  source_type: text("source_type").default('lab_order'::text),
  source_confidence: text("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),

// Add to locations table:
  name: text("name"),
  address: text("address"),
  city: text("city"),
  state: text("state"),
  zip: text("zip"),
  phone: text("phone"),
  health_system_id: integer("health_system_id"),
  zip_code: text("zip_code"),
  npi: text("npi"),
  location_type: text("location_type"),
  organization_id: integer("organization_id"),
  short_name: text("short_name"),
  services: text("services").default('[]'::jsonb),
  facility_code: text("facility_code"),
  has_lab: boolean("has_lab").default(false),
  has_imaging: boolean("has_imaging").default(false),
  has_pharmacy: boolean("has_pharmacy").default(false),

// Add to magic_links table:
  email: text("email"),
  token: text("token"),
  expires_at: timestamp("expires_at"),
  used: boolean("used").default(false),
  used_at: timestamp("used_at"),
  ip_address: text("ip_address"),
  user_agent: text("user_agent"),

// Add to medical_history table:
  patient_id: integer("patient_id"),
  condition: text("condition"),
  onset_date: date("onset_date"),
  resolution_date: date("resolution_date"),
  status: text("status").default('active'::text),
  severity: text("severity"),
  notes: text("notes"),

// Add to medical_problems table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  problem_title: text("problem_title"),
  icd10_code: text("icd10_code"),
  snomed_code: text("snomed_code"),
  problem_status: text("problem_status").default('active'::text),
  onset_date: date("onset_date"),
  resolution_date: date("resolution_date"),
  notes: text("notes"),
  severity: text("severity"),
  source_type: text("source_type").default('provider_entered'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  provider_id: integer("provider_id"),
  date_diagnosed: date("date_diagnosed"),
  last_updated: timestamp("last_updated").default(now()),
  verification_status: text("verification_status").default('unverified'::text),
  verification_date: timestamp("verification_date"),
  verified_by: integer("verified_by"),
  clinical_status: text("clinical_status"),
  body_site: text("body_site"),
  body_site_laterality: text("body_site_laterality"),
  category: text("category"),
  current_icd10_code: text("current_icd10_code"),
  last_reviewed_date: timestamp("last_reviewed_date"),
  reviewed_by: integer("reviewed_by"),
  patient_education_provided: boolean("patient_education_provided").default(false),
  care_plan_status: text("care_plan_status"),
  functional_impact: text("functional_impact"),
  prognosis: text("prognosis"),
  risk_factors: text("risk_factors"),
  associated_conditions: text("associated_conditions"),
  treatment_goals: text("treatment_goals"),
  monitoring_parameters: text("monitoring_parameters"),
  follow_up_required: boolean("follow_up_required").default(false),
  follow_up_date: date("follow_up_date"),
  problem_ranking: integer("problem_ranking"),
  display_in_summary: boolean("display_in_summary").default(true),
  patient_aware: boolean("patient_aware").default(true),
  caregiver_aware: boolean("caregiver_aware").default(false),
  reportable_condition: boolean("reportable_condition").default(false),
  reported_date: date("reported_date"),
  clinical_priority: text("clinical_priority"),
  social_determinants: text("social_determinants"),
  cultural_considerations: text("cultural_considerations"),
  patient_goals: text("patient_goals"),
  barriers_to_care: text("barriers_to_care"),
  quality_measures: text("quality_measures"),
  outcome_measures: text("outcome_measures"),
  care_team_members: text("care_team_members"),
  care_coordination_notes: text("care_coordination_notes"),
  original_problem_text: text("original_problem_text"),
  mapped_by_ai: boolean("mapped_by_ai").default(false),
  ai_confidence_score: decimal("ai_confidence_score"),
  human_verified: boolean("human_verified").default(false),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),

// Add to medication_formulary table:
  medication_name: text("medication_name"),
  generic_name: text("generic_name"),
  drug_class: text("drug_class"),
  dosage_forms: text("dosage_forms"),
  strengths: text("strengths"),
  route: text("route"),
  tier: integer("tier"),
  prior_auth_required: boolean("prior_auth_required").default(false),
  quantity_limits: text("quantity_limits"),
  step_therapy: text("step_therapy"),
  alternatives: text("alternatives"),
  active: boolean("active").default(true),

// Add to medications table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  medication_name: text("medication_name"),
  generic_name: text("generic_name"),
  brand_name: text("brand_name"),
  dosage: text("dosage"),
  strength: text("strength"),
  form: text("form"),
  route: text("route"),
  frequency: text("frequency"),
  sig: text("sig"),
  start_date: date("start_date"),
  end_date: date("end_date"),
  discontinuation_date: date("discontinuation_date"),
  discontinuation_reason: text("discontinuation_reason"),
  status: text("status").default('active'::text),
  prescribed_by: integer("prescribed_by"),
  prescribed_date: timestamp("prescribed_date"),
  pharmacy: text("pharmacy"),
  prescriber_notes: text("prescriber_notes"),
  patient_instructions: text("patient_instructions"),
  ndc_code: text("ndc_code"),
  rxnorm_code: text("rxnorm_code"),
  days_supply: integer("days_supply"),
  quantity: integer("quantity"),
  quantity_unit: text("quantity_unit"),
  refills: integer("refills"),
  refills_remaining: integer("refills_remaining"),
  lot_number: text("lot_number"),
  expiration_date: date("expiration_date"),
  manufacturer: text("manufacturer"),
  dea_schedule: text("dea_schedule"),
  is_controlled: boolean("is_controlled").default(false),
  requires_prior_auth: boolean("requires_prior_auth").default(false),
  prior_auth_number: text("prior_auth_number"),
  formulary_status: text("formulary_status"),
  therapeutic_class: text("therapeutic_class"),
  source_type: text("source_type").default('prescribed'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  grouping_strategy: text("grouping_strategy"),
  discontinuation_source: text("discontinuation_source"),
  original_order_id: integer("original_order_id"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),
  dosage_form: text("dosage_form"),
  total_refills: integer("total_refills"),
  surescripts_id: text("surescripts_id"),
  clinical_indication: text("clinical_indication"),
  source_order_id: integer("source_order_id"),
  problem_mappings: text("problem_mappings").default('[]'::jsonb),
  reason_for_change: text("reason_for_change"),
  medication_history: text("medication_history").default('[]'::jsonb),
  change_log: text("change_log").default('[]'::jsonb),
  source_notes: text("source_notes"),
  entered_by: integer("entered_by"),
  related_medications: text("related_medications").default('[]'::jsonb),
  drug_interactions: text("drug_interactions").default('[]'::jsonb),
  pharmacy_order_id: text("pharmacy_order_id"),
  insurance_auth_status: text("insurance_auth_status"),
  prior_auth_required: boolean("prior_auth_required").default(false),
  discontinued_date: date("discontinued_date"),
  prescriber: text("prescriber"),
  prescriber_id: integer("prescriber_id"),
  first_encounter_id: integer("first_encounter_id"),
  last_updated_encounter_id: integer("last_updated_encounter_id"),

// Add to migration_invitations table:
  from_health_system_id: integer("from_health_system_id"),
  to_health_system_id: integer("to_health_system_id"),
  invitation_code: text("invitation_code"),
  status: text("status").default('pending'::text),
  expires_at: timestamp("expires_at"),

// Add to newsletter_subscribers table:
  email: text("email"),
  name: text("name"),
  subscribed_at: timestamp("subscribed_at").default(now()),
  unsubscribed_at: timestamp("unsubscribed_at"),
  preferences: text("preferences"),
  source: text("source"),

// Add to orders table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  provider_id: integer("provider_id"),
  order_type: text("order_type"),
  order_date: timestamp("order_date").default(CURRENT_TIMESTAMP),
  priority: text("priority").default('routine'::character varying),
  status: text("status").default('pending'::character varying),
  medication_name: text("medication_name"),
  medication_dosage: text("medication_dosage"),
  medication_route: text("medication_route"),
  medication_frequency: text("medication_frequency"),
  medication_duration: text("medication_duration"),
  medication_quantity: integer("medication_quantity"),
  medication_refills: integer("medication_refills"),
  lab_test_name: text("lab_test_name"),
  lab_test_code: text("lab_test_code"),
  imaging_study_type: text("imaging_study_type"),
  imaging_body_part: text("imaging_body_part"),
  referral_specialty: text("referral_specialty"),
  referral_reason: text("referral_reason"),
  instructions: text("instructions"),
  clinical_indication: text("clinical_indication"),
  diagnosis_codes: text("diagnosis_codes"),
  order_status: text("order_status").default('pending'::character varying),
  reference_id: text("reference_id"),
  provider_notes: text("provider_notes"),
  dosage: text("dosage"),
  quantity: integer("quantity"),
  sig: text("sig"),
  refills: integer("refills"),
  prescriber: text("prescriber"),
  prescriber_id: integer("prescriber_id"),
  ordered_by: integer("ordered_by"),
  test_name: text("test_name"),
  test_code: text("test_code"),
  study_type: text("study_type"),
  body_part: text("body_part"),
  lab_name: text("lab_name"),
  ndc_code: text("ndc_code"),
  form: text("form"),
  route: text("route"),
  frequency: text("frequency"),
  duration: text("duration"),
  start_date: timestamp("start_date"),
  end_date: timestamp("end_date"),
  route_of_administration: text("route_of_administration"),
  indication: text("indication"),
  imaging_order_id: integer("imaging_order_id"),
  external_order_id: text("external_order_id"),
  days_supply: integer("days_supply"),
  diagnosis_code: text("diagnosis_code"),
  requires_prior_auth: boolean("requires_prior_auth").default(false),
  prior_auth_number: text("prior_auth_number"),
  specimen_type: text("specimen_type"),
  fasting_required: boolean("fasting_required").default(false),
  region: text("region"),
  laterality: text("laterality"),
  contrast_needed: boolean("contrast_needed").default(false),
  specialty_type: text("specialty_type"),
  provider_name: text("provider_name"),
  urgency: text("urgency"),
  ordered_at: timestamp("ordered_at"),
  approved_by: integer("approved_by"),
  approved_at: timestamp("approved_at"),
  quantity_unit: text("quantity_unit"),

// Add to organization_documents table:
  organization_id: integer("organization_id"),
  health_system_id: integer("health_system_id"),
  document_type: text("document_type"),
  document_name: text("document_name"),
  file_path: text("file_path"),
  file_size: integer("file_size"),
  mime_type: text("mime_type"),
  metadata: text("metadata"),
  uploaded_by: integer("uploaded_by"),
  active: boolean("active").default(true),

// Add to organizations table:
  name: text("name"),
  type: text("type"),
  address: text("address"),
  city: text("city"),
  state: text("state"),
  zip_code: text("zip_code"),
  phone: text("phone"),
  website: text("website"),
  health_system_id: integer("health_system_id"),
  short_name: text("short_name"),
  organization_type: text("organization_type"),
  region: text("region"),
  tax_id: text("tax_id"),
  npi: text("npi"),
  email: text("email"),
  active: boolean("active").default(true),

// Add to patient_attachments table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  filename: text("filename"),
  original_filename: text("original_filename"),
  file_type: text("file_type"),
  file_size: integer("file_size"),
  mime_type: text("mime_type"),
  upload_date: timestamp("upload_date").default(now()),
  uploaded_by: integer("uploaded_by"),
  document_type: text("document_type"),
  document_date: date("document_date"),
  description: text("description"),
  thumbnail_path: text("thumbnail_path"),
  ocr_text: text("ocr_text"),
  ocr_completed: boolean("ocr_completed").default(false),
  ocr_completed_at: timestamp("ocr_completed_at"),
  processing_status: text("processing_status").default('pending'::text),
  processing_notes: text("processing_notes"),
  extracted_data: text("extracted_data"),
  chart_sections_updated: text("chart_sections_updated"),
  confidence_scores: text("confidence_scores"),
  hash_value: text("hash_value"),
  is_deleted: boolean("is_deleted").default(false),
  deleted_at: timestamp("deleted_at"),
  deleted_by: integer("deleted_by"),
  retention_date: date("retention_date"),
  access_count: integer("access_count").default(0),
  last_accessed_at: timestamp("last_accessed_at"),
  tags: text("tags"),
  source_system: text("source_system"),
  external_id: text("external_id"),
  file_name: text("file_name"),
  original_file_name: text("original_file_name"),
  file_extension: text("file_extension"),
  file_path: text("file_path"),
  category: text("category").default('general'::text),
  title: text("title"),
  is_confidential: boolean("is_confidential").default(false),
  access_level: text("access_level").default('standard'::text),
  content_hash: text("content_hash"),
  virus_scan_status: text("virus_scan_status").default('pending'::text),

// Add to patient_order_preferences table:
  patient_id: integer("patient_id"),
  provider_id: integer("provider_id"),
  order_type: text("order_type"),
  preferences: text("preferences"),
  standing_orders: text("standing_orders"),

// Add to patient_physical_findings table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  body_system: text("body_system"),
  finding: text("finding"),
  severity: text("severity"),
  laterality: text("laterality"),
  quality: text("quality"),
  duration: text("duration"),
  context: text("context"),
  associated_symptoms: text("associated_symptoms"),
  provider_id: integer("provider_id"),
  examined_at: timestamp("examined_at"),
  is_normal: boolean("is_normal").default(false),
  requires_follow_up: boolean("requires_follow_up").default(false),
  follow_up_timeframe: text("follow_up_timeframe"),

// Add to patient_scheduling_patterns table:
  patient_id: integer("patient_id"),
  provider_id: integer("provider_id"),
  pattern_type: text("pattern_type"),
  frequency: text("frequency"),
  time_preferences: text("time_preferences"),
  seasonal_variations: text("seasonal_variations"),

// Add to patients table:
  external_id: text("external_id"),
  first_name: text("first_name"),
  last_name: text("last_name"),
  middle_name: text("middle_name"),
  date_of_birth: date("date_of_birth"),
  gender: text("gender"),
  email: text("email"),
  phone: text("phone"),
  phone_type: text("phone_type"),
  address: text("address"),
  city: text("city"),
  state: text("state"),
  zip: text("zip"),
  insurance_provider: text("insurance_provider"),
  insurance_policy_number: text("insurance_policy_number"),
  insurance_group_number: text("insurance_group_number"),
  emergency_contact_name: text("emergency_contact_name"),
  emergency_contact_phone: text("emergency_contact_phone"),
  emergency_contact_relationship: text("emergency_contact_relationship"),
  preferred_language: text("preferred_language").default('English'::character varying),
  race: text("race"),
  ethnicity: text("ethnicity"),
  health_system_id: integer("health_system_id").default(2),
  mrn: text("mrn"),
  contact_number: text("contact_number"),
  emergency_contact: text("emergency_contact"),
  preferred_location_id: integer("preferred_location_id"),
  primary_provider_id: integer("primary_provider_id"),
  insurance_primary: text("insurance_primary"),
  insurance_secondary: text("insurance_secondary"),
  policy_number: text("policy_number"),
  group_number: text("group_number"),
  assistant_id: text("assistant_id"),
  assistant_thread_id: text("assistant_thread_id"),
  last_chart_summary: text("last_chart_summary"),
  chart_last_updated: timestamp("chart_last_updated"),
  active_problems: text("active_problems").default('[]'::jsonb),
  critical_alerts: text("critical_alerts").default('[]'::jsonb),
  data_origin_type: text("data_origin_type").default('emr_direct'::text),
  original_facility_id: integer("original_facility_id"),
  created_by_provider_id: integer("created_by_provider_id"),
  creation_context: text("creation_context"),
  derivative_work_note: text("derivative_work_note"),
  migration_consent: text("migration_consent").default('{"consentGiven": false}'::jsonb),
  profile_photo_filename: text("profile_photo_filename"),
  consent_given: boolean("consent_given").default(false),

// Add to phi_access_logs table:
  user_id: integer("user_id"),
  patient_id: integer("patient_id"),
  action: text("action"),
  resource_type: text("resource_type"),
  resource_id: integer("resource_id"),
  ip_address: text("ip_address"),
  user_agent: text("user_agent"),
  user_name: text("user_name"),
  user_role: text("user_role"),
  health_system_id: integer("health_system_id"),
  location_id: integer("location_id"),
  patient_name: text("patient_name"),
  access_method: text("access_method"),
  http_method: text("http_method"),
  api_endpoint: text("api_endpoint"),
  session_id: text("session_id"),
  success: boolean("success").default(true),
  error_message: text("error_message"),
  response_time: integer("response_time"),
  access_reason: text("access_reason"),
  emergency_access: boolean("emergency_access").default(false),
  break_glass_reason: text("break_glass_reason"),
  accessed_at: timestamp("accessed_at").default(now()),

// Add to problem_rank_overrides table:
  user_id: integer("user_id"),
  patient_id: integer("patient_id"),
  problem_id: integer("problem_id"),
  custom_rank: integer("custom_rank"),
  reason: text("reason"),

// Add to provider_schedules table:
  provider_id: integer("provider_id"),
  location_id: integer("location_id"),
  day_of_week: text("day_of_week"),
  start_time: text("start_time"),
  end_time: text("end_time"),
  break_start: text("break_start"),
  break_end: text("break_end"),
  effective_from: date("effective_from"),
  effective_to: date("effective_to"),
  schedule_type: text("schedule_type"),
  max_appointments: integer("max_appointments"),
  active: boolean("active").default(true),

// Add to provider_scheduling_patterns table:
  provider_id: integer("provider_id"),
  pattern_type: text("pattern_type"),
  preferences: text("preferences"),
  constraints: text("constraints"),
  historical_data: text("historical_data"),

// Add to realtime_schedule_status table:
  provider_id: integer("provider_id"),
  date: date("date"),
  time_slot: text("time_slot"),
  status: text("status"),
  appointment_id: integer("appointment_id"),
  buffer_status: text("buffer_status"),
  efficiency_score: decimal("efficiency_score"),

// Add to resource_bookings table:
  resource_id: integer("resource_id"),
  appointment_id: integer("appointment_id"),
  start_time: timestamp("start_time"),
  end_time: timestamp("end_time"),
  status: text("status").default('scheduled'::text),

// Add to schedule_exceptions table:
  provider_id: integer("provider_id"),
  exception_date: date("exception_date"),
  exception_type: text("exception_type"),
  start_time: text("start_time"),
  end_time: text("end_time"),
  reason: text("reason"),
  affects_scheduling: boolean("affects_scheduling").default(true),

// Add to schedule_preferences table:
  provider_id: integer("provider_id"),
  preferred_appointment_duration: integer("preferred_appointment_duration").default(20),
  buffer_time_minutes: integer("buffer_time_minutes").default(5),
  lunch_start: text("lunch_start"),
  lunch_duration: integer("lunch_duration").default(60),
  max_daily_appointments: integer("max_daily_appointments"),
  max_consecutive_appointments: integer("max_consecutive_appointments"),
  preferred_break_after_n_appointments: integer("preferred_break_after_n_appointments"),
  break_duration_minutes: integer("break_duration_minutes").default(15),
  allow_double_booking: boolean("allow_double_booking").default(false),
  allow_overtime: boolean("allow_overtime").default(false),
  overtime_limit_minutes: integer("overtime_limit_minutes").default(30),

// Add to scheduling_ai_factors table:
  category: text("category"),
  factor_name: text("factor_name"),
  description: text("description"),
  data_type: text("data_type"),
  is_enabled: boolean("is_enabled").default(true),
  default_weight: decimal("default_weight").default(0.50),

// Add to scheduling_ai_weights table:
  provider_id: integer("provider_id"),
  location_id: integer("location_id"),
  health_system_id: integer("health_system_id"),
  created_by: integer("created_by"),
  factor_name: text("factor_name"),
  weight: decimal("weight"),
  is_active: boolean("is_active").default(true),
  custom_parameters: text("custom_parameters"),

// Add to scheduling_resources table:
  name: text("name"),
  resource_type: text("resource_type"),
  location_id: integer("location_id"),
  capacity: integer("capacity").default(1),
  available_hours: text("available_hours"),
  requires_cleaning: boolean("requires_cleaning").default(false),
  cleaning_duration: integer("cleaning_duration").default(0),
  active: boolean("active").default(true),

// Add to scheduling_rules table:
  name: text("name"),
  rule_type: text("rule_type"),
  applies_to: text("applies_to"),
  provider_id: integer("provider_id"),
  location_id: integer("location_id"),
  conditions: text("conditions"),
  actions: text("actions"),
  priority: integer("priority").default(100),
  active: boolean("active").default(true),

// Add to scheduling_templates table:
  name: text("name"),
  provider_id: integer("provider_id"),
  template_type: text("template_type"),
  day_configuration: text("day_configuration"),
  appointment_types: text("appointment_types"),
  buffer_rules: text("buffer_rules"),
  break_configuration: text("break_configuration"),
  active: boolean("active").default(true),

// Add to signatures table:
  encounter_id: integer("encounter_id"),
  signed_by: integer("signed_by"),
  signature_type: text("signature_type"),
  signed_at: timestamp("signed_at").default(CURRENT_TIMESTAMP),
  signature_data: text("signature_data"),
  ip_address: text("ip_address"),
  attestation_text: text("attestation_text"),

// Add to signed_orders table:
  order_id: integer("order_id"),
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  order_type: text("order_type"),
  delivery_method: text("delivery_method"),
  delivery_status: text("delivery_status").default('pending'::character varying),
  delivery_attempts: integer("delivery_attempts").default(0),
  last_delivery_attempt: timestamp("last_delivery_attempt"),
  delivery_error: text("delivery_error"),
  can_change_delivery: boolean("can_change_delivery").default(true),
  delivery_lock_reason: text("delivery_lock_reason"),
  original_delivery_method: text("original_delivery_method"),
  delivery_changes: text("delivery_changes").default('[]'::jsonb),
  signed_at: timestamp("signed_at"),
  signed_by: integer("signed_by"),

// Add to social_history table:
  patient_id: integer("patient_id"),
  category: text("category"),
  details: text("details"),
  status: text("status").default('current'::text),
  start_date: date("start_date"),
  end_date: date("end_date"),
  quantity: text("quantity"),
  frequency: text("frequency"),
  notes: text("notes"),
  source_type: text("source_type").default('patient_reported'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  risk_level: text("risk_level"),
  counseling_provided: boolean("counseling_provided").default(false),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),

// Add to subscription_history table:
  health_system_id: integer("health_system_id"),
  change_type: text("change_type"),
  previous_tier: integer("previous_tier"),
  new_tier: integer("new_tier"),
  previous_status: text("previous_status"),
  new_status: text("new_status"),
  changed_by: integer("changed_by"),
  reason: text("reason"),
  billing_impact: text("billing_impact"),
  effective_date: timestamp("effective_date"),

// Add to subscription_keys table:
  health_system_id: integer("health_system_id"),
  key_value: text("key_value"),
  key_type: text("key_type"),
  created_by: integer("created_by"),
  assigned_to: integer("assigned_to"),
  assigned_at: timestamp("assigned_at"),
  expires_at: timestamp("expires_at"),
  status: text("status").default('active'::text),
  usage_count: integer("usage_count").default(0),
  last_used_at: timestamp("last_used_at"),
  metadata: text("metadata"),

// Add to surgical_history table:
  patient_id: integer("patient_id"),
  procedure_name: text("procedure_name"),
  procedure_date: date("procedure_date"),
  surgeon: text("surgeon"),
  facility: text("facility"),
  indication: text("indication"),
  findings: text("findings"),
  complications: text("complications"),
  anesthesia_type: text("anesthesia_type"),
  implants_used: text("implants_used"),
  pathology_results: text("pathology_results"),
  recovery_notes: text("recovery_notes"),
  source_type: text("source_type").default('patient_reported'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  procedure_code: text("procedure_code"),
  laterality: text("laterality"),
  approach: text("approach"),
  duration_minutes: integer("duration_minutes"),
  estimated_blood_loss_ml: integer("estimated_blood_loss_ml"),
  specimens_removed: text("specimens_removed"),
  drains_placed: text("drains_placed"),
  post_op_diagnosis: text("post_op_diagnosis"),
  discharge_instructions: text("discharge_instructions"),
  follow_up_required: boolean("follow_up_required").default(false),
  follow_up_date: date("follow_up_date"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),
  surgeon_name: text("surgeon_name"),
  facility_name: text("facility_name"),
  cpt_code: text("cpt_code"),
  icd10_procedure_code: text("icd10_procedure_code"),
  anatomical_site: text("anatomical_site"),
  urgency_level: text("urgency_level"),
  length_of_stay: integer("length_of_stay"),
  blood_loss: text("blood_loss"),
  transfusions_required: boolean("transfusions_required").default(false),
  implants_hardware: text("implants_hardware"),
  recovery_status: text("recovery_status"),
  last_updated_encounter: integer("last_updated_encounter"),

// Add to template_shares table:
  template_id: integer("template_id"),
  shared_by: integer("shared_by"),
  shared_with: integer("shared_with"),
  status: text("status").default('pending'::text),
  shared_at: timestamp("shared_at").default(CURRENT_TIMESTAMP),
  responded_at: timestamp("responded_at"),
  share_message: text("share_message"),
  can_modify: boolean("can_modify").default(false),
  active: boolean("active").default(true),

// Add to template_versions table:
  template_id: integer("template_id"),
  version_number: integer("version_number"),
  change_description: text("change_description"),
  changed_by: integer("changed_by"),
  example_note_snapshot: text("example_note_snapshot"),
  generated_prompt_snapshot: text("generated_prompt_snapshot"),
  change_type: text("change_type").default('manual'::text),

// Add to user_assistant_threads table:
  user_id: integer("user_id"),
  assistant_type: text("assistant_type"),
  thread_id: text("thread_id"),
  assistant_id: text("assistant_id"),
  context: text("context"),
  last_message_at: timestamp("last_message_at"),
  message_count: integer("message_count").default(0),
  active: boolean("active").default(true),

// Add to user_edit_patterns table:
  user_id: integer("user_id"),
  note_type: text("note_type"),
  section_name: text("section_name"),
  edit_type: text("edit_type"),
  original_text: text("original_text"),
  edited_text: text("edited_text"),
  edit_frequency: integer("edit_frequency").default(1),
  confidence_score: decimal("confidence_score"),
  last_occurrence: timestamp("last_occurrence"),

// Add to user_locations table:
  user_id: integer("user_id"),
  location_id: integer("location_id"),
  is_primary: boolean("is_primary").default(false),
  permissions: text("permissions").default('{}'::jsonb),
  role_at_location: text("role_at_location"),

// Add to user_note_preferences table:
  user_id: integer("user_id"),
  last_selected_note_type: text("last_selected_note_type"),
  default_chief_complaint: text("default_chief_complaint"),
  default_physical_exam: text("default_physical_exam"),
  default_ros_negatives: text("default_ros_negatives"),
  default_assessment_style: text("default_assessment_style"),
  use_voice_commands: boolean("use_voice_commands").default(false),
  auto_save_interval: integer("auto_save_interval").default(30),
  show_template_suggestions: boolean("show_template_suggestions").default(true),
  include_time_stamps: boolean("include_time_stamps").default(false),
  default_note_font_size: integer("default_note_font_size").default(14),
  default_macro_set: text("default_macro_set"),
  preferred_exam_order: text("preferred_exam_order"),
  custom_normal_exams: text("custom_normal_exams").default('{}'::jsonb),
  abbreviation_expansions: text("abbreviation_expansions").default('{}'::jsonb),
  quick_phrases: text("quick_phrases").default('[]'::jsonb),
  billing_reminder_enabled: boolean("billing_reminder_enabled").default(true),
  sign_reminder_minutes: integer("sign_reminder_minutes").default(30),
  default_soap_template: integer("default_soap_template"),
  default_apso_template: integer("default_apso_template"),
  default_progress_template: integer("default_progress_template"),
  default_h_and_p_template: integer("default_h_and_p_template"),
  default_discharge_template: integer("default_discharge_template"),
  default_procedure_template: integer("default_procedure_template"),
  global_ai_learning: boolean("global_ai_learning").default(true),
  learning_aggressiveness: text("learning_aggressiveness").default('moderate'::text),
  remember_last_template: boolean("remember_last_template").default(true),
  show_template_preview: boolean("show_template_preview").default(true),
  auto_save_changes: boolean("auto_save_changes").default(true),
  medical_problems_display_threshold: integer("medical_problems_display_threshold").default(100),
  ranking_weights: text("ranking_weights").default('{"clinical_severity": 40, "patient_frequency": 20, "clinical_relevance": 10, "treatment_complexity": 30}'::jsonb),
  chart_panel_width: integer("chart_panel_width").default(400),
  enable_dense_view: boolean("enable_dense_view").default(false),

// Add to user_note_templates table:
  user_id: integer("user_id"),
  template_name: text("template_name"),
  base_note_type: text("base_note_type"),
  display_name: text("display_name"),
  is_personal: boolean("is_personal").default(true),
  is_default: boolean("is_default").default(false),
  created_by: integer("created_by"),
  shared_by: integer("shared_by"),
  example_note: text("example_note"),
  base_note_text: text("base_note_text"),
  inline_comments: text("inline_comments"),
  has_comments: boolean("has_comments").default(false),
  generated_prompt: text("generated_prompt"),
  prompt_version: integer("prompt_version").default(1),
  enable_ai_learning: boolean("enable_ai_learning").default(true),
  learning_confidence: decimal("learning_confidence").default(0.75),
  last_learning_update: timestamp("last_learning_update"),
  usage_count: integer("usage_count").default(0),
  last_used: timestamp("last_used"),
  version: integer("version").default(1),
  parent_template_id: integer("parent_template_id"),
  active: boolean("active").default(true),

// Add to user_problem_list_preferences table:
  user_id: integer("user_id"),
  show_resolved_problems: boolean("show_resolved_problems").default(false),
  show_inactive_problems: boolean("show_inactive_problems").default(true),
  sort_by: text("sort_by").default('ranking'::text),
  group_by_category: boolean("group_by_category").default(true),
  highlight_recent_changes: boolean("highlight_recent_changes").default(true),
  recent_change_days: integer("recent_change_days").default(30),
  max_problems_displayed: integer("max_problems_displayed").default(20),

// Add to user_session_locations table:
  user_id: integer("user_id"),
  location_id: integer("location_id"),
  session_id: text("session_id"),
  is_primary: boolean("is_primary").default(false),
  permissions: text("permissions").default('{}'::jsonb),
  remembered: boolean("remembered").default(false),
  is_active: boolean("is_active").default(true),
  remember_selection: boolean("remember_selection").default(true),
  selected_at: timestamp("selected_at").default(now()),

// Add to users table:
  username: text("username"),
  email: text("email"),
  password: text("password"),
  first_name: text("first_name"),
  last_name: text("last_name"),
  role: text("role").default('user'::character varying),
  npi: text("npi"),
  credentials: text("credentials"),
  specialties: text("specialties"),
  license_number: text("license_number"),
  license_state: text("license_state"),
  bio: text("bio"),
  is_active: boolean("is_active").default(true),
  last_login: timestamp("last_login"),
  profile_image_url: text("profile_image_url"),
  health_system_id: integer("health_system_id").default(2),
  email_verified: boolean("email_verified").default(false),
  email_verification_token: text("email_verification_token"),
  email_verification_expires: timestamp("email_verification_expires"),
  mfa_enabled: boolean("mfa_enabled").default(false),
  mfa_secret: text("mfa_secret"),
  account_status: text("account_status").default('active'::text),
  failed_login_attempts: integer("failed_login_attempts").default(0),
  account_locked_until: timestamp("account_locked_until"),
  require_password_change: boolean("require_password_change").default(false),
  verification_status: text("verification_status").default('unverified'::text),
  verified_with_key_id: integer("verified_with_key_id"),
  verified_at: timestamp("verified_at"),
  active: boolean("active").default(true),

// Add to vitals table:
  patient_id: integer("patient_id"),
  encounter_id: integer("encounter_id"),
  blood_pressure_systolic: integer("blood_pressure_systolic"),
  blood_pressure_diastolic: integer("blood_pressure_diastolic"),
  heart_rate: integer("heart_rate"),
  respiratory_rate: integer("respiratory_rate"),
  temperature: decimal("temperature"),
  oxygen_saturation: integer("oxygen_saturation"),
  weight: decimal("weight"),
  height: decimal("height"),
  bmi: decimal("bmi"),
  recorded_at: timestamp("recorded_at").default(now()),
  recorded_by: integer("recorded_by"),
  notes: text("notes"),
  pain_scale: integer("pain_scale"),
  blood_glucose: integer("blood_glucose"),
  source_type: text("source_type").default('manual_entry'::text),
  source_confidence: decimal("source_confidence"),
  extracted_from_attachment_id: integer("extracted_from_attachment_id"),
  extraction_notes: text("extraction_notes"),
  consolidation_reasoning: text("consolidation_reasoning"),
  merged_ids: text("merged_ids"),
  visit_history: text("visit_history").default('[]'::jsonb),
  entry_type: text("entry_type").default('manual'::text),
  systolic: integer("systolic"),
  diastolic: integer("diastolic"),
  systolic_bp: integer("systolic_bp"),
  diastolic_bp: integer("diastolic_bp"),
  alerts: text("alerts").default('[]'::jsonb),
  parsed_from_text: boolean("parsed_from_text"),
  processing_notes: text("processing_notes"),
  original_text: text("original_text"),
  source_notes: text("source_notes"),
  entered_by: integer("entered_by"),

// Add to webauthn_credentials table:
  user_id: integer("user_id"),
  credential_id: text("credential_id"),
  public_key: text("public_key"),
  counter: text("counter").default(0),
  device_type: text("device_type"),
  transports: text("transports"),
  last_used_at: timestamp("last_used_at"),
  registered_device: text("registered_device"),
  device_name: text("device_name"),
