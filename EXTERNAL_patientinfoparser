import { useState, useRef, useCallback, useEffect } from "react";
import { toast } from "@/hooks/use-toast";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, Upload, Camera } from "lucide-react";

interface PatientInfo {
  first_name?: string;
  last_name?: string;
  date_of_birth?: string;
  gender?: string;
  address?: string;
  contact_number?: string;
}

interface PatientInfoParserProps {
  onPatientInfoParsed: (info: PatientInfo) => void;
  initialValues?: PatientInfo;
}

export function PatientInfoParser({
  onPatientInfoParsed,
  initialValues,
}: PatientInfoParserProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingType, setProcessingType] = useState<
    "screenshot" | "image" | "text" | null
  >(null);
  const [lastResult, setLastResult] = useState<PatientInfo | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // âœ… Drag counter to avoid false leave triggers
  const dragCounter = useRef(0);

  // Define readFileAsBase64 first since processImageFile depends on it
  const readFileAsBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        if (typeof reader.result === "string") {
          resolve(reader.result.split(",")[1]);
        } else {
          reject("Failed to read file");
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  // Define processImageFile before it's used
  const processImageFile = async (file: File) => {
    try {
      if (!file) return;
      const isScreenshot =
        file.name === "image.png" ||
        file.name.includes("screenshot") ||
        file.name.includes("Screen Shot") ||
        file.name.includes("Capture");
      const fileType = file.type;

      if (!fileType.startsWith("image/")) {
        toast({
          title: "Invalid file type",
          description: "Only image uploads (PNG, JPEG) are supported.",
          variant: "destructive",
        });
        return;
      }

      setIsProcessing(true);
      setProcessingType(isScreenshot ? "screenshot" : "image");

      const base64Data = await readFileAsBase64(file);

      const response = await fetch("/api/parse-patient-info", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ imageData: base64Data }),
      });

      if (!response.ok) throw new Error(`Bad response: ${response.statusText}`);
      const parsedInfo = await response.json();

      if (parsedInfo && (parsedInfo.first_name || parsedInfo.last_name)) {
        toast({
          title: "Patient info extracted",
          description: `${isScreenshot ? "Screenshot" : "Image"} processed successfully.`,
        });
        setLastResult(parsedInfo);
        onPatientInfoParsed(parsedInfo);
      } else {
        toast({
          title: "Nothing found",
          description: "No patient info detected in the image.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Processing failed:", error);
      toast({
        title: "Error during processing",
        description: "File couldn't be processed.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
      setProcessingType(null);
    }
  };

  const handleDragEnter = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current += 1;
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current -= 1;
    if (dragCounter.current === 0) {
      setIsDragging(false);
    }
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDrop = useCallback(
    async (e: React.DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
      setIsDragging(false);
      dragCounter.current = 0;
      const files = e.dataTransfer.files;
      if (files && files.length > 0) {
        await processImageFile(files[0]);
      }
    },
    [/* No need to include processImageFile in the dependency array as it's defined in the same scope */],
  );

  const handleFileChange = useCallback(
    async (e: React.ChangeEvent<HTMLInputElement>) => {
      const files = e.target.files;
      if (files && files.length > 0) {
        await processImageFile(files[0]);
      }
    },
    [/* No need to include processImageFile in the dependency array as it's defined in the same scope */],
  );

  const handlePaste = useCallback(
    async (e: React.ClipboardEvent) => {
      const items = e.clipboardData.items;
      let hasProcessedItem = false;

      for (let i = 0; i < items.length; i++) {
        if (items[i].type.indexOf("image") !== -1) {
          const file = items[i].getAsFile();
          if (file) {
            setIsProcessing(true);
            setProcessingType("screenshot");
            toast({
              title: "Processing screenshot",
              description: "Analyzing the pasted screenshot...",
            });
            processImageFile(file);
            hasProcessedItem = true;
            return;
          }
        }
      }

      const text = e.clipboardData.getData("text");
      if (text && text.trim() && !hasProcessedItem) {
        try {
          setIsProcessing(true);
          setProcessingType("text");
          toast({
            title: "Processing pasted text",
            description: "Analyzing text for patient information...",
          });

          const textAsBase64 = btoa(unescape(encodeURIComponent(text)));

          const response = await fetch("/api/parse-patient-info", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              imageData: textAsBase64,
              isTextContent: true,
            }),
          });

          if (!response.ok) throw new Error(`HTTP error ${response.status}`);

          const parsedInfo = await response.json();

          if (parsedInfo && (parsedInfo.first_name || parsedInfo.last_name)) {
            toast({
              title: "Patient info extracted",
              description: "Form updated based on the extracted data.",
            });
            setLastResult(parsedInfo);
            onPatientInfoParsed(parsedInfo);
          } else {
            toast({
              title: "No patient info found",
              description: "No recognizable patient info in the pasted text.",
              variant: "destructive",
            });
          }
        } catch (error) {
          console.error("Error processing text:", error);
          toast({
            title: "Error processing text",
            description: "Something went wrong. Try again.",
            variant: "destructive",
          });
        } finally {
          setIsProcessing(false);
          setProcessingType(null);
        }
      }
    },
    [onPatientInfoParsed], // Removed processImageFile from dependency array as it's defined in the same scope
  );

  useEffect(() => {
    const handleGlobalPaste = (e: ClipboardEvent) => {
      if (document.activeElement !== document.body) return;

      const syntheticEvent = {
        clipboardData: {
          items: e.clipboardData?.items,
          getData: (type: string) => e.clipboardData?.getData(type) || "",
        },
        preventDefault: () => e.preventDefault(),
        stopPropagation: () => e.stopPropagation(),
      } as unknown as React.ClipboardEvent;

      handlePaste(syntheticEvent);
    };

    document.addEventListener("paste", handleGlobalPaste);
    return () => document.removeEventListener("paste", handleGlobalPaste);
  }, [handlePaste]);

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="mb-6" onPaste={handlePaste}>
      <Card>
        <CardContent className="p-4">
          <div
            className={`flex flex-col items-center justify-center p-6 border-2 border-dashed rounded-lg transition-colors ${
              isDragging ? "border-primary bg-primary/10" : "border-gray-300"
            } focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent`}
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            onPaste={handlePaste}
            tabIndex={0}
          >
            <div style={{ pointerEvents: "none" }}>
              {isProcessing ? (
                <div className="flex flex-col items-center space-y-2">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <p className="text-sm text-gray-500">
                    {processingType === "screenshot" &&
                      "Analyzing screenshot..."}
                    {processingType === "image" &&
                      "Analyzing uploaded image..."}
                    {processingType === "text" && "Analyzing pasted text..."}
                    {!processingType && "Analyzing patient info..."}
                  </p>
                </div>
              ) : (
                <>
                  <div className="flex items-center mb-2">
                    <Upload className="h-8 w-8 text-gray-400 mr-2" />
                    <Camera className="h-8 w-8 text-blue-400" />
                  </div>
                  <h3 className="font-medium text-lg mb-1">
                    Extract Patient Information
                  </h3>
                  <p className="text-sm text-gray-500 text-center mb-2">
                    Capture info from screenshots or uploaded image files
                  </p>
                  <div
                    className="flex flex-wrap gap-2 justify-center mb-4"
                    style={{ pointerEvents: "auto" }}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-1 text-xs"
                      onClick={() => {
                        toast({
                          title: "Ready for screenshot",
                          description:
                            "Paste a screenshot using Ctrl+V / Cmd+V",
                        });
                      }}
                    >
                      <Camera className="h-3 w-3" />
                      Paste Screenshot
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-1 text-xs"
                      onClick={triggerFileInput}
                    >
                      <Upload className="h-3 w-3" />
                      Browse Images
                    </Button>
                  </div>

                  <input
                    type="file"
                    ref={fileInputRef}
                    className="hidden"
                    accept="image/*"
                    onChange={handleFileChange}
                    multiple={false}
                  />

                  <div className="text-xs text-gray-400 text-center">
                    You can also drag & drop or paste patient images directly
                  </div>

                  {lastResult && (
                    <div className="mt-4 p-3 bg-primary/10 rounded-md w-full">
                      <h4 className="font-medium text-sm mb-1">
                        Last Extraction Result:
                      </h4>
                      <div className="text-xs text-gray-600 space-y-1">
                        {lastResult.first_name && (
                          <p>
                            First Name: <strong>{lastResult.first_name}</strong>
                          </p>
                        )}
                        {lastResult.last_name && (
                          <p>
                            Last Name: <strong>{lastResult.last_name}</strong>
                          </p>
                        )}
                        {lastResult.date_of_birth && (
                          <p>
                            DOB: <strong>{lastResult.date_of_birth}</strong>
                          </p>
                        )}
                        {lastResult.gender && (
                          <p>
                            Gender: <strong>{lastResult.gender}</strong>
                          </p>
                        )}
                        {lastResult.address && (
                          <p>
                            Address: <strong>{lastResult.address}</strong>
                          </p>
                        )}
                        {lastResult.contact_number && (
                          <p>
                            Phone: <strong>{lastResult.contact_number}</strong>
                          </p>
                        )}
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
