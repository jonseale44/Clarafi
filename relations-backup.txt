export const usersRelations = relations(users, ({ many }) => ({
  encounters: many(encounters),
  appointments: many(appointments),
  signatures: many(signatures),
  labOrders: many(labOrders),
  imagingOrders: many(imagingOrders),
  orders: many(orders),
  orderedOrders: many(orders, { relationName: "orderedBy" }),
  approvedOrders: many(orders, { relationName: "approvedBy" }),
}));

// Replaced by patientsRelationsEnhanced below

export const encountersRelations = relations(encounters, ({ one, many }) => ({
  patient: one(patients, {
    fields: [encounters.patientId],
    references: [patients.id],
  }),
  provider: one(users, {
    fields: [encounters.providerId],
    references: [users.id],
  }),
  appointment: one(appointments, {
    fields: [encounters.appointmentId],
    references: [appointments.id],
  }),
  signatures: many(signatures),
  vitals: many(vitals),
  medications: many(medications),
  diagnoses: many(diagnoses),
  labOrders: many(labOrders),
  imagingOrders: many(imagingOrders),
  orders: many(orders),
  attachments: many(patientAttachments),
--
export const signaturesRelations = relations(signatures, ({ one, many }) => ({
  signedByUser: one(users, {
    fields: [signatures.signedBy],
    references: [users.id],
  }),
  encounter: one(encounters, {
    fields: [signatures.encounterId],
    references: [encounters.id],
  }),
}));

export const labOrdersRelations = relations(labOrders, ({ one, many }) => ({
  patient: one(patients, {
    fields: [labOrders.patientId],
    references: [patients.id],
  }),
  encounter: one(encounters, {
    fields: [labOrders.encounterId],
    references: [encounters.id],
  }),
  orderedByUser: one(users, {
    fields: [labOrders.orderedBy],
    references: [users.id],
  }),
  results: many(labResults),
}));

export const labResultsRelations = relations(labResults, ({ one }) => ({
  labOrder: one(labOrders, {
    fields: [labResults.labOrderId],
    references: [labOrders.id],
  }),
  patient: one(patients, {
    fields: [labResults.patientId],
    references: [patients.id],
  }),
  reviewedByUser: one(users, {
    fields: [labResults.reviewedBy],
    references: [users.id],
  }),
}));

export const labReferenceRangesRelations = relations(labReferenceRanges, ({ many }) => ({
  // No direct relations - this is a lookup table queried by LOINC code
}));

export const imagingOrdersRelations = relations(imagingOrders, ({ one, many }) => ({
  patient: one(patients, {
    fields: [imagingOrders.patientId],
    references: [patients.id],
  }),
  encounter: one(encounters, {
    fields: [imagingOrders.encounterId],
    references: [encounters.id],
  }),
  orderedByUser: one(users, {
    fields: [imagingOrders.providerId],
    references: [users.id],
  }),
  results: many(imagingResults),
}));

export const imagingResultsRelations = relations(imagingResults, ({ one }) => ({
  imagingOrder: one(imagingOrders, {
    fields: [imagingResults.imagingOrderId],
    references: [imagingOrders.id],
  }),
  patient: one(patients, {
    fields: [imagingResults.patientId],
    references: [patients.id],
  }),
}));

export const patientPhysicalFindingsRelations = relations(patientPhysicalFindings, ({ one }) => ({
  patient: one(patients, {
    fields: [patientPhysicalFindings.patientId],
    references: [patients.id],
  }),
  firstNotedEncounter: one(encounters, {
    fields: [patientPhysicalFindings.firstNotedEncounter],
    references: [encounters.id],
  }),
  lastConfirmedEncounter: one(encounters, {
    fields: [patientPhysicalFindings.lastConfirmedEncounter],
    references: [encounters.id],
  }),
  lastSeenEncounter: one(encounters, {
    fields: [patientPhysicalFindings.lastSeenEncounter],
    references: [encounters.id],
  }),
}));

export const ordersRelations = relations(orders, ({ one }) => ({
  patient: one(patients, {
    fields: [orders.patientId],
    references: [patients.id],
  }),
  encounter: one(encounters, {
    fields: [orders.encounterId],
    references: [encounters.id],
  }),
  orderedByUser: one(users, {
    fields: [orders.orderedBy],
    references: [users.id],
  }),
  approvedByUser: one(users, {
    fields: [orders.approvedBy],
    references: [users.id],
  }),
}));

export const medicalProblemsRelations = relations(medicalProblems, ({ one }) => ({
  patient: one(patients, {
    fields: [medicalProblems.patientId],
    references: [patients.id],
  }),
  firstEncounter: one(encounters, {
    fields: [medicalProblems.firstEncounterId],
    references: [encounters.id],
  }),
  lastUpdatedEncounter: one(encounters, {
    fields: [medicalProblems.lastUpdatedEncounterId],
    references: [encounters.id],
  }),
}));

export const medicationsRelations = relations(medications, ({ one, many }) => ({
  patient: one(patients, {
    fields: [medications.patientId],
    references: [patients.id],
  }),
  encounter: one(encounters, {
    fields: [medications.encounterId],
    references: [encounters.id],
  }),
  prescriber: one(users, {
    fields: [medications.prescriberId],
    references: [users.id],
  }),
  firstEncounter: one(encounters, {
    fields: [medications.firstEncounterId],
    references: [encounters.id],
  }),
  lastUpdatedEncounter: one(encounters, {
    fields: [medications.lastUpdatedEncounterId],
    references: [encounters.id],
  }),
--
export const electronicSignaturesRelations = relations(electronicSignatures, ({ one, many }) => ({
  user: one(users, {
    fields: [electronicSignatures.userId],
    references: [users.id],
  }),
  encounter: one(encounters, {
    fields: [electronicSignatures.encounterId],
    references: [encounters.id],
  }),
  medications: many(medications),
}));

export const pharmaciesRelations = relations(pharmacies, ({ many }) => ({
  prescriptionTransmissions: many(prescriptionTransmissions),
}));

export const prescriptionTransmissionsRelations = relations(prescriptionTransmissions, ({ one }) => ({
  medication: one(medications, {
    fields: [prescriptionTransmissions.medicationId],
    references: [medications.id],
  }),
  order: one(orders, {
    fields: [prescriptionTransmissions.orderId],
    references: [orders.id],
  }),
  patient: one(patients, {
    fields: [prescriptionTransmissions.patientId],
    references: [patients.id],
  }),
  provider: one(users, {
    fields: [prescriptionTransmissions.providerId],
    references: [users.id],
  }),
  pharmacy: one(pharmacies, {
    fields: [prescriptionTransmissions.pharmacyId],
    references: [pharmacies.id],
  }),
--
export const patientOrderPreferencesRelations = relations(patientOrderPreferences, ({ one }) => ({
  patient: one(patients, {
    fields: [patientOrderPreferences.patientId],
    references: [patients.id],
  }),
  lastUpdatedByUser: one(users, {
    fields: [patientOrderPreferences.lastUpdatedBy],
    references: [users.id],
  }),
}));

export const signedOrdersRelations = relations(signedOrders, ({ one }) => ({
  order: one(orders, {
    fields: [signedOrders.orderId],
    references: [orders.id],
  }),
  patient: one(patients, {
    fields: [signedOrders.patientId],
    references: [patients.id],
  }),
  encounter: one(encounters, {
    fields: [signedOrders.encounterId],
    references: [encounters.id],
  }),
  signedByUser: one(users, {
    fields: [signedOrders.signedBy],
    references: [users.id],
  }),
}));

// Medical Problems Types
export type MedicalProblem = typeof medicalProblems.$inferSelect;
--
export const healthSystemsRelations = relations(healthSystems, ({ many }) => ({
  organizations: many(organizations),
  locations: many(locations), // Direct health system locations
}));

export const organizationsRelations = relations(organizations, ({ one, many }) => ({
  healthSystem: one(healthSystems, {
    fields: [organizations.healthSystemId],
    references: [healthSystems.id],
  }),
  locations: many(locations),
}));

export const locationsRelations = relations(locations, ({ one, many }) => ({
  organization: one(organizations, {
    fields: [locations.organizationId],
    references: [organizations.id],
  }),
  healthSystem: one(healthSystems, {
    fields: [locations.healthSystemId],
    references: [healthSystems.id],
  }),
  userLocations: many(userLocations),
  appointments: many(appointments),
  providerSchedules: many(providerSchedules),
}));

export const userLocationsRelations = relations(userLocations, ({ one }) => ({
  user: one(users, {
    fields: [userLocations.userId],
    references: [users.id],
  }),
  location: one(locations, {
    fields: [userLocations.locationId],
    references: [locations.id],
  }),
}));

export const userSessionLocationsRelations = relations(userSessionLocations, ({ one }) => ({
  user: one(users, {
    fields: [userSessionLocations.userId],
    references: [users.id],
  }),
  location: one(locations, {
    fields: [userSessionLocations.locationId],
    references: [locations.id],
  }),
}));

export const providerSchedulesRelations = relations(providerSchedules, ({ one, many }) => ({
  provider: one(users, {
    fields: [providerSchedules.providerId],
    references: [users.id],
  }),
  location: one(locations, {
    fields: [providerSchedules.locationId],
    references: [locations.id],
  }),
  exceptions: many(scheduleExceptions),
}));

export const scheduleExceptionsRelations = relations(scheduleExceptions, ({ one }) => ({
  provider: one(users, {
    fields: [scheduleExceptions.providerId],
    references: [users.id],
  }),
  location: one(locations, {
    fields: [scheduleExceptions.locationId],
    references: [locations.id],
  }),
  createdByUser: one(users, {
    fields: [scheduleExceptions.createdBy],
    references: [users.id],
  }),
}));

// Enhanced Relations for Existing Tables
export const appointmentsRelationsEnhanced = relations(appointments, ({ one }) => ({
  patient: one(patients, {
    fields: [appointments.patientId],
    references: [patients.id],
  }),
--
export const subscriptionKeysRelations = relations(subscriptionKeys, ({ one }) => ({
  healthSystem: one(healthSystems, {
    fields: [subscriptionKeys.healthSystemId],
    references: [healthSystems.id],
  }),
  usedByUser: one(users, {
    fields: [subscriptionKeys.usedBy],
    references: [users.id],
  }),
  deactivatedByUser: one(users, {
    fields: [subscriptionKeys.deactivatedBy],
    references: [users.id],
  }),
}));

// Subscription history relations
export const subscriptionHistoryRelations = relations(subscriptionHistory, ({ one }) => ({
  healthSystem: one(healthSystems, {
    fields: [subscriptionHistory.healthSystemId],
    references: [healthSystems.id],
  }),
}));

// Email notifications relations
export const emailNotificationsRelations = relations(emailNotifications, ({ one }) => ({
  user: one(users, {
    fields: [emailNotifications.userId],
    references: [users.id],
  }),
  healthSystem: one(healthSystems, {
    fields: [emailNotifications.healthSystemId],
    references: [healthSystems.id],
  }),
}));

// Clinic admin verifications relations
export const clinicAdminVerificationsRelations = relations(clinicAdminVerifications, ({ one }) => ({
  healthSystem: one(healthSystems, {
    fields: [clinicAdminVerifications.healthSystemId],
    references: [healthSystems.id],
  }),
  approvedByUser: one(users, {
    fields: [clinicAdminVerifications.approvedBy],
    references: [users.id],
  }),
}));

// Organization documents relations
export const organizationDocumentsRelations = relations(organizationDocuments, ({ one }) => ({
  healthSystem: one(healthSystems, {
    fields: [organizationDocuments.healthSystemId],
    references: [healthSystems.id],
  }),
  uploadedByUser: one(users, {
    fields: [organizationDocuments.uploadedBy],
    references: [users.id],
  }),
  verifiedByUser: one(users, {
    fields: [organizationDocuments.verifiedBy],
    references: [users.id],
  }),
}));

// Migration invitations relations
export const migrationInvitationsRelations = relations(migrationInvitations, ({ one }) => ({
  invitedUser: one(users, {
    fields: [migrationInvitations.invitedUserId],
    references: [users.id],
  }),
  targetHealthSystem: one(healthSystems, {
    fields: [migrationInvitations.targetHealthSystemId],
    references: [healthSystems.id],
  }),
  createdByUser: one(users, {
    fields: [migrationInvitations.createdByUserId],
    references: [users.id],
  }),
}));

// ============================================
// HIPAA AUDIT LOGGING TABLES
// ============================================
// Comprehensive audit logging for HIPAA compliance
// Must track all PHI access, modifications, and authentication events

