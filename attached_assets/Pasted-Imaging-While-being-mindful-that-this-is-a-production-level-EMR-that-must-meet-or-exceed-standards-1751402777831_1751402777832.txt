Imaging: 
While being mindful that this is a production-level EMR that must meet or exceed standards of care expected from commercial outpatient EMRs like EPIC and Athena, let’s turn our attention to building out the “imaging” section of the patient chart. This section will need to have all the standard fields that typically accompany imaging within an EMR. Following similar logic as we see with parallel processing within the unified medical problems parser, surgical history, etc, design an equivalent imaging parsing function that works in parallel to all these other processes. It should be able to automatically update from attachments and also from the note, with GPT-derived confidence scores displayed in badges along with the noted origin of the information. All of this should be editable by the user along with the usual CRUD ability for the user to add or remove imaging findings. This is just a brainstorming session for now. Don’t make any code changes. Ask me any questions you have about our implementation before you change any code. Reminder of our program-wide axioms: 

AXIOMS
There are 4 key axioms you must follow: 
GPT alone is in charge of medical or billing logic. Do not introduce frontend logic or regex parsing that is meant to replace or even FILTER GPT’s decisions. GPT is much MUCH smarter than any frontend logic we could possibly create so do not bother. 
This is a production-level EMR meant to meet or exceed standards of care of outpatient EMRs like Epic and Athena. 
Do not allow any “backup” systems. Backup systems allow us to take shortcuts and not identify important failures. If our first idea doesn’t work, I want to see it fail. No backups. 
Do not create what already exists. Our program almost certainly has existing legacy code in place for whatever function you are about to implement. Before beginning any code modification, evaluate the codebase in its entirely to identify this existing code and avoid replicating it. If it already exists, modify it. If it doesn’t exist, you must clearly demonstrate to me that there is no technical debt or legacy code and THEN I will approve code modification. 
