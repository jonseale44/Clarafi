# IMPLEMENTATION INSTRUCTIONS - NOT A FEATURE REQUEST
This is a complete technical specification for building an EMR system. 
All components listed below are REQUIRED, not optional features.
BEGIN IMPLEMENTATION IMMEDIATELY using the exact schemas and code provided.
DO NOT treat this as a planning document - this IS the plan.

# Complete EMR Rebuild Master Guide

## üéØ **Project Vision**
Build a fresh, clean Electronic Medical Record (EMR) system that eliminates technical debt while preserving the crown jewel voice recording workflow. This is a complete rebuild - NOT a fix of the existing system.

**Core Mission**: Prevent providers from becoming documentationists while maintaining clinical excellence through intelligent AI-assisted workflows.

---

## üèóÔ∏è **Revolutionary Architecture Principles**

### **1. Single Encounter Model**
- **ELIMINATE** dual table confusion (encounters vs office_visits)
- **ONE** unified encounters table handles all visit types
- **SAME** medical chart data visible to both nurses and providers
- **DIFFERENT** AI assistance during recording based on role

### **2. Smart Update Strategy**
**Historical Data (UPDATE-able by GPT):**
- Family History: "Father: DM2" ‚Üí "Father: DM2, h/o CAD, died of MI at age 70"
- Medical History: "Appendectomy 2015" ‚Üí "Cholecystectomy 2015" (correction)
- Social History: Smoking status changes, occupation updates
- Allergies: Updated reactions, newly discovered allergies

**Factual Data (APPEND-only, Immutable):**
- Vitals: Each measurement is discrete, never updated
- Lab Results: Each test result stands alone
- Imaging: Each study is separate
- Medications: Track start/stop dates as new records
- Diagnoses: New diagnoses added, existing marked resolved/chronic

### **3. Role-Based AI Assistance**
**Same Recording Interface + Chart Access for Both Roles**
- **Nurse AI Prompts**: "Patient reports chest pain" ‚Üí "Ask about quality, duration, radiation, timing"
- **Provider AI Prompts**: "Patient has chest pain, troponin ordered" ‚Üí "Consider serial troponins q6h x3, ASA 81mg"

---

## üìã **Complete Database Schema Design**

### **Core Tables**

```sql
-- 1. UNIFIED ENCOUNTERS (replaces dual table system)
CREATE TABLE encounters (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  provider_id INTEGER REFERENCES users(id) NOT NULL,
  
  -- ENCOUNTER CLASSIFICATION
  encounter_type TEXT NOT NULL, -- 'office_visit', 'patient_communication', 'virtual_visit', 'orders_only'
  encounter_subtype TEXT, -- 'preventive_care', 'urgent_care', 'procedure_visit'
  
  -- TIMING & STATUS
  start_time TIMESTAMP DEFAULT NOW(),
  end_time TIMESTAMP,
  encounter_status TEXT DEFAULT 'scheduled', -- 'scheduled', 'in_progress', 'completed', 'signed'
  
  -- CLINICAL DOCUMENTATION
  chief_complaint TEXT,
  subjective TEXT, -- Provider's SOAP note
  objective TEXT,
  assessment TEXT,
  plan TEXT,
  
  -- NURSING DOCUMENTATION (same encounter, different view)
  nurse_assessment TEXT,
  nurse_interventions TEXT,
  nurse_notes TEXT,
  
  -- VOICE WORKFLOW SUPPORT
  transcription_raw TEXT,
  transcription_processed TEXT,
  ai_suggestions JSONB DEFAULT {},
  
  -- AUTO-GENERATED (from voice)
  draft_orders JSONB DEFAULT [],
  draft_diagnoses JSONB DEFAULT [],
  cpt_codes JSONB DEFAULT [],
  
  -- METADATA
  location TEXT,
  appointment_id INTEGER REFERENCES appointments(id),
  signature_id VARCHAR REFERENCES signatures(id),
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  
  -- AUDIT TRAIL
  last_chart_update TIMESTAMP,
  chart_update_duration INTEGER
);

-- 2. PATIENTS (enhanced for voice workflow)
CREATE TABLE patients (
  id SERIAL PRIMARY KEY,
  mrn VARCHAR UNIQUE NOT NULL,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  date_of_birth DATE NOT NULL,
  gender TEXT NOT NULL,
  contact_number TEXT,
  email TEXT,
  address TEXT,
  emergency_contact TEXT,
  
  -- VOICE WORKFLOW OPTIMIZATION
  assistant_thread_id TEXT, -- OpenAI Assistant thread
  last_chart_summary TEXT, -- GPT-generated summary
  chart_last_updated TIMESTAMP,
  
  -- CLINICAL FLAGS
  active_problems JSONB DEFAULT [],
  critical_alerts JSONB DEFAULT [],
  
  profile_photo_filename TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 3. USERS (Healthcare professionals)
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  
  -- BASIC INFO
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  role TEXT NOT NULL, -- 'admin', 'provider', 'nurse', 'staff'
  
  -- PROFESSIONAL DETAILS
  npi TEXT UNIQUE, -- National Provider Identifier
  credentials TEXT,
  specialties TEXT[],
  license_number TEXT,
  
  -- SECURITY
  mfa_enabled BOOLEAN DEFAULT FALSE,
  mfa_secret TEXT,
  account_status TEXT DEFAULT 'active',
  last_login TIMESTAMP,
  failed_login_attempts INTEGER DEFAULT 0,
  account_locked_until TIMESTAMP,
  
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW()
);
```

### **Historical Data Tables (UPDATE-able by GPT)**

```sql
-- Family History (GPT can update existing family members)
CREATE TABLE family_history (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  family_member TEXT NOT NULL, -- 'father', 'mother', 'brother'
  medical_history TEXT, -- "DM2, h/o CAD, died of MI at age 70"
  last_updated_encounter INTEGER REFERENCES encounters(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(patient_id, family_member)
);

-- Medical History (GPT can update/correct past conditions)
CREATE TABLE medical_history (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  condition_category TEXT NOT NULL, -- 'cardiac', 'endocrine', 'surgical'
  history_text TEXT NOT NULL,
  last_updated_encounter INTEGER REFERENCES encounters(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Social History (GPT can update status changes)
CREATE TABLE social_history (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  category TEXT NOT NULL, -- 'smoking', 'alcohol', 'occupation'
  current_status TEXT NOT NULL,
  history_notes TEXT,
  last_updated_encounter INTEGER REFERENCES encounters(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(patient_id, category)
);

-- Allergies (GPT can update reactions)
CREATE TABLE allergies (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  allergen TEXT NOT NULL,
  reaction TEXT,
  severity TEXT,
  last_updated_encounter INTEGER REFERENCES encounters(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(patient_id, allergen)
);
```

### **Factual Data Tables (APPEND-only)**

```sql
-- Vitals (each measurement is discrete)
CREATE TABLE vitals (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  measured_at TIMESTAMP NOT NULL,
  systolic_bp INTEGER,
  diastolic_bp INTEGER,
  heart_rate INTEGER,
  temperature DECIMAL,
  weight DECIMAL,
  height DECIMAL,
  bmi DECIMAL,
  oxygen_saturation DECIMAL,
  respiratory_rate INTEGER,
  pain_scale INTEGER,
  recorded_by TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Medications (track changes with start/stop)
CREATE TABLE medications (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  medication_name TEXT NOT NULL,
  dosage TEXT NOT NULL,
  frequency TEXT NOT NULL,
  route TEXT, -- 'oral', 'IV', 'topical'
  start_date DATE NOT NULL,
  end_date DATE, -- NULL means active
  prescriber TEXT,
  status TEXT DEFAULT 'active',
  reason_for_change TEXT,
  medical_problem TEXT, -- What this treats
  created_at TIMESTAMP DEFAULT NOW()
);

-- Diagnoses (track status changes)
CREATE TABLE diagnoses (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  diagnosis TEXT NOT NULL,
  icd10_code TEXT,
  diagnosis_date DATE,
  status TEXT NOT NULL, -- 'active', 'resolved', 'chronic', 'rule_out'
  notes TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);
```

---

## üß™ **Lab Orders & Results Integration**

### **Lab Orders (Outbound to External Labs)**
```sql
-- Lab Orders (sent to external labs via HL7/API)
CREATE TABLE lab_orders (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  order_set_id TEXT, -- Groups related tests together
  
  -- ORDER DETAILS
  test_code TEXT NOT NULL, -- LOINC code
  test_name TEXT NOT NULL,
  priority TEXT DEFAULT 'routine', -- 'stat', 'urgent', 'routine'
  clinical_indication TEXT, -- Why this test was ordered
  
  -- ORDERING PROVIDER
  ordered_by INTEGER REFERENCES users(id) NOT NULL,
  ordered_at TIMESTAMP DEFAULT NOW(),
  
  -- EXTERNAL LAB INTEGRATION
  external_lab_id TEXT, -- Which lab this was sent to
  external_order_id TEXT, -- Lab's tracking number
  hl7_message_id TEXT, -- HL7 message tracking
  
  -- STATUS TRACKING
  order_status TEXT DEFAULT 'pending', -- 'pending', 'sent', 'received', 'in_progress', 'completed', 'cancelled'
  sent_at TIMESTAMP,
  acknowledged_at TIMESTAMP,
  
  -- SPECIMEN DETAILS
  specimen_type TEXT, -- 'blood', 'urine', 'tissue', etc.
  collection_instructions TEXT,
  fasting_required BOOLEAN DEFAULT FALSE,
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Lab Results (received from external labs)
CREATE TABLE lab_results (
  id SERIAL PRIMARY KEY,
  lab_order_id INTEGER REFERENCES lab_orders(id) NOT NULL,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  
  -- RESULT DATA
  test_code TEXT NOT NULL,
  test_name TEXT NOT NULL,
  result_value TEXT,
  result_units TEXT,
  reference_range TEXT,
  abnormal_flag TEXT, -- 'H', 'L', 'HH', 'LL', 'A', null
  
  -- TIMING
  specimen_collected_at TIMESTAMP,
  result_available_at TIMESTAMP,
  received_at TIMESTAMP DEFAULT NOW(),
  
  -- EXTERNAL TRACKING
  external_lab_id TEXT,
  external_result_id TEXT,
  hl7_message_id TEXT,
  
  -- STATUS & REVIEW
  result_status TEXT DEFAULT 'pending', -- 'pending', 'preliminary', 'final', 'corrected', 'cancelled'
  reviewed_by INTEGER REFERENCES users(id),
  reviewed_at TIMESTAMP,
  provider_notes TEXT,
  
  created_at TIMESTAMP DEFAULT NOW()
);

-- External Lab Directory
CREATE TABLE external_labs (
  id SERIAL PRIMARY KEY,
  lab_name TEXT NOT NULL, -- "LabCorp", "Quest Diagnostics"
  lab_identifier TEXT UNIQUE NOT NULL, -- CLIA number
  
  -- INTEGRATION METHOD
  integration_type TEXT NOT NULL, -- 'hl7', 'api', 'manual_fax'
  api_endpoint TEXT,
  hl7_endpoint TEXT,
  
  -- AUTHENTICATION (encrypted)
  api_key_encrypted TEXT,
  username_encrypted TEXT,
  ssl_certificate_path TEXT,
  
  -- CAPABILITIES
  supported_tests JSONB, -- Array of LOINC codes they can process
  turnaround_times JSONB, -- Expected results time by test type
  
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW()
);
```

---

## üè• **Imaging Orders & Results Integration**

```sql
-- Imaging Orders (sent to radiology/imaging centers)
CREATE TABLE imaging_orders (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  
  -- ORDER DETAILS
  study_type TEXT NOT NULL, -- 'X-ray', 'CT', 'MRI', 'Ultrasound'
  body_part TEXT NOT NULL,
  laterality TEXT, -- 'left', 'right', 'bilateral'
  contrast_needed BOOLEAN DEFAULT FALSE,
  
  -- CLINICAL INFO
  clinical_indication TEXT NOT NULL,
  clinical_history TEXT,
  relevant_symptoms TEXT,
  
  -- ORDERING PROVIDER
  ordered_by INTEGER REFERENCES users(id) NOT NULL,
  ordered_at TIMESTAMP DEFAULT NOW(),
  
  -- EXTERNAL INTEGRATION
  external_facility_id TEXT,
  external_order_id TEXT,
  dicom_accession_number TEXT,
  
  -- STATUS TRACKING
  order_status TEXT DEFAULT 'pending',
  scheduled_at TIMESTAMP,
  completed_at TIMESTAMP,
  
  -- SPECIAL INSTRUCTIONS
  prep_instructions TEXT,
  scheduling_notes TEXT,
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Imaging Results (received from radiology)
CREATE TABLE imaging_results (
  id SERIAL PRIMARY KEY,
  imaging_order_id INTEGER REFERENCES imaging_orders(id) NOT NULL,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  
  -- STUDY DETAILS
  study_date TIMESTAMP NOT NULL,
  modality TEXT NOT NULL, -- 'XR', 'CT', 'MR', 'US'
  body_part TEXT,
  
  -- RESULTS
  findings TEXT, -- Radiologist findings
  impression TEXT, -- Final impression/diagnosis
  recommendations TEXT, -- Follow-up recommendations
  
  -- RADIOLOGIST INFO
  radiologist_name TEXT,
  interpreted_at TIMESTAMP,
  
  -- EXTERNAL TRACKING
  dicom_study_id TEXT,
  pacs_link TEXT, -- Link to PACS viewer
  
  -- REVIEW STATUS
  result_status TEXT DEFAULT 'preliminary', -- 'preliminary', 'final', 'addendum'
  reviewed_by INTEGER REFERENCES users(id),
  reviewed_at TIMESTAMP,
  provider_notes TEXT,
  
  created_at TIMESTAMP DEFAULT NOW()
);
```

---

## üíä **E-Prescribing Integration**

```sql
-- Prescriptions (e-prescribing integration)
CREATE TABLE prescriptions (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER REFERENCES patients(id) NOT NULL,
  encounter_id INTEGER REFERENCES encounters(id) NOT NULL,
  prescribed_by INTEGER REFERENCES users(id) NOT NULL,
  
  -- PRESCRIPTION DETAILS
  medication_name TEXT NOT NULL,
  strength TEXT NOT NULL,
  dosage_form TEXT, -- 'tablet', 'capsule', 'liquid'
  sig TEXT NOT NULL, -- Prescriber instructions
  quantity_prescribed INTEGER,
  days_supply INTEGER,
  refills_allowed INTEGER,
  
  -- E-PRESCRIBING
  pharmacy_ncpdp_id TEXT, -- National pharmacy identifier
  transmission_method TEXT, -- 'electronic', 'phone', 'fax'
  transmitted_at TIMESTAMP,
  
  -- STATUS
  prescription_status TEXT DEFAULT 'active',
  filled_at TIMESTAMP,
  
  created_at TIMESTAMP DEFAULT NOW()
);

-- Pharmacy Directory
CREATE TABLE pharmacies (
  id SERIAL PRIMARY KEY,
  pharmacy_name TEXT NOT NULL,
  ncpdp_id TEXT UNIQUE NOT NULL, -- National pharmacy ID
  phone TEXT,
  fax TEXT,
  address TEXT,
  
  -- E-PRESCRIBING CAPABILITY
  accepts_electronic BOOLEAN DEFAULT TRUE,
  
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW()
);
```

---

## üîó **EMR Interoperability (Epic, Cerner, Athena)**

```sql
-- External EMR Connections
CREATE TABLE external_emr_connections (
  id SERIAL PRIMARY KEY,
  emr_name TEXT NOT NULL, -- 'Epic MyChart', 'Athena Collector'
  emr_type TEXT NOT NULL, -- 'epic', 'cerner', 'athena'
  
  -- FHIR CONFIGURATION
  fhir_base_url TEXT NOT NULL, -- 'https://fhir.epic.com/interconnect-fhir-oauth/'
  fhir_version TEXT DEFAULT 'R4',
  
  -- AUTHENTICATION
  client_id TEXT NOT NULL,
  client_secret_encrypted TEXT NOT NULL,
  auth_type TEXT DEFAULT 'oauth2',
  token_url TEXT,
  scope TEXT DEFAULT 'patient/*.read',
  
  -- CAPABILITIES
  supported_resources JSONB DEFAULT '[]', -- ['Patient', 'Encounter', 'Observation']
  read_only BOOLEAN DEFAULT TRUE,
  bidirectional_sync BOOLEAN DEFAULT FALSE,
  
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW()
);

-- FHIR Resource Mappings
CREATE TABLE fhir_resource_mappings (
  id SERIAL PRIMARY KEY,
  external_emr_id INTEGER REFERENCES external_emr_connections(id),
  
  -- LOCAL RECORD
  local_table TEXT NOT NULL, -- 'patients', 'encounters', 'medications'
  local_record_id TEXT NOT NULL,
  
  -- EXTERNAL FHIR RESOURCE
  fhir_resource_type TEXT NOT NULL, -- 'Patient', 'Encounter', 'MedicationRequest'
  fhir_resource_id TEXT NOT NULL,
  external_version TEXT, -- Resource version for conflict detection
  
  -- SYNCHRONIZATION STATUS
  last_sync_at TIMESTAMP,
  sync_direction TEXT DEFAULT 'import', -- 'import', 'export', 'bidirectional'
  sync_status TEXT DEFAULT 'pending', -- 'pending', 'synced', 'conflict', 'error'
  sync_error TEXT,
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(local_table, local_record_id, external_emr_id)
);
```

---

## üé§ **Voice Workflow Architecture (Crown Jewel)**

### **Recording Flow**
1. **User clicks "Record"** ‚Üí Audio capture begins
2. **Real-time transcription** ‚Üí Text appears in interface
3. **Role-based AI suggestions** ‚Üí Display contextual prompts
4. **User stops recording** ‚Üí Full transcription sent to GPT
5. **GPT processes** ‚Üí Smart chart update (60-90 seconds)
6. **Chart refreshes** ‚Üí Updated medical data displays

### **Smart Chart Update Service**
```typescript
export class SmartChartUpdater {
  async processVoiceRecording(
    transcription: string, 
    patientId: number, 
    encounterId: number, 
    userRole: string
  ): Promise<ChartUpdates> {
    // Get current patient chart context
    const currentChart = await this.getPatientChart(patientId);
    
    // Role-specific GPT instructions
    const systemPrompt = userRole === 'nurse' 
      ? this.getNurseSystemPrompt() 
      : this.getProviderSystemPrompt();
    
    // Send to GPT with full medical context
    const gptResponse = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: `
          Current Patient Chart: ${JSON.stringify(currentChart)}
          New Recording: ${transcription}
          
          Please provide complete updated medical chart data using smart update strategy.
          Historical data can be updated, factual data must be appended.
        `}
      ]
    });
    
    // Parse and apply smart updates
    const updates = JSON.parse(gptResponse.choices[0].message.content);
    await this.applySmartUpdates(updates, patientId, encounterId);
    
    return updates;
  }
  
  private async applySmartUpdates(updates: any, patientId: number, encounterId: number) {
    // Historical data: UPDATE existing records
    if (updates.familyHistory) {
      await this.updateFamilyHistory(updates.familyHistory, patientId, encounterId);
    }
    
    if (updates.socialHistory) {
      await this.updateSocialHistory(updates.socialHistory, patientId, encounterId);
    }
    
    // Factual data: APPEND new records
    if (updates.vitals) {
      await this.appendVitals(updates.vitals, patientId, encounterId);
    }
    
    if (updates.medications) {
      await this.appendMedications(updates.medications, patientId, encounterId);
    }
    
    if (updates.diagnoses) {
      await this.appendDiagnoses(updates.diagnoses, patientId, encounterId);
    }
  }
  
  private getNurseSystemPrompt(): string {
    return `You are a medical AI assistant helping nurses document patient encounters.
    
    ROLE: Provide questioning guidance and assessment support for nurses.
    
    For voice recordings, suggest follow-up questions nurses should ask:
    - Pain assessment: "Ask about quality, duration, radiation, aggravating factors"
    - Symptom evaluation: "Inquire about onset, timing, associated symptoms"
    - Medication compliance: "Verify patient understanding of dosing instructions"
    
    When updating charts:
    - Historical data (family history, social history) can be UPDATED
    - Factual data (vitals, labs) must be APPENDED as new records
    - Focus on nursing assessments and patient education needs`;
  }
  
  private getProviderSystemPrompt(): string {
    return `You are a medical AI assistant helping providers with clinical decision-making.
    
    ROLE: Provide clinical decision support and medical management guidance.
    
    For voice recordings, suggest clinical considerations:
    - Differential diagnosis: "Consider ruling out cardiac vs pulmonary etiology"
    - Treatment options: "Lisinopril 5-10mg daily, monitor K+ and creatinine"
    - Follow-up planning: "Recheck labs in 2 weeks, return if symptoms worsen"
    
    When updating charts:
    - Historical data (family history, medical history) can be UPDATED with new information
    - Factual data (vitals, labs, medications) must be APPENDED as discrete records
    - Generate appropriate orders, diagnoses, and billing codes`;
  }
}
```

---

## üîê **Security & HIPAA Compliance**

### **Authentication & Authorization**
```sql
-- Audit Logs (HIPAA required)
CREATE TABLE audit_logs (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  action TEXT NOT NULL, -- 'view', 'create', 'update', 'delete', 'export'
  resource_type TEXT NOT NULL, -- 'patient', 'encounter', 'lab_result'
  resource_id TEXT NOT NULL,
  patient_id INTEGER REFERENCES patients(id), -- For PHI tracking
  
  -- REQUEST DETAILS
  ip_address INET,
  user_agent TEXT,
  session_id TEXT,
  
  -- HIPAA COMPLIANCE
  access_reason TEXT, -- 'treatment', 'payment', 'operations'
  minimum_necessary BOOLEAN DEFAULT TRUE,
  
  timestamp TIMESTAMP DEFAULT NOW()
);

-- User Sessions (secure session management)
CREATE TABLE user_sessions (
  id TEXT PRIMARY KEY, -- UUID
  user_id INTEGER REFERENCES users(id) NOT NULL,
  
  -- SESSION SECURITY
  created_at TIMESTAMP DEFAULT NOW(),
  last_activity TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP NOT NULL,
  ip_address INET,
  user_agent TEXT,
  
  -- MFA STATUS
  mfa_verified BOOLEAN DEFAULT FALSE,
  
  active BOOLEAN DEFAULT TRUE
);
```

---

## üöÄ **Implementation Roadmap**

### **Phase 1: Foundation (Months 1-2)**
1. Set up unified encounters table and eliminate dual-table system
2. Implement smart update service architecture
3. Create role-based AI prompt templates
4. Build basic voice recording interface

### **Phase 2: Core Medical Workflows (Months 3-4)**
1. Lab orders and results integration with HL7
2. Imaging orders and results workflow
3. E-prescribing integration
4. Voice workflow with GPT processing

### **Phase 3: External Integration (Months 5-6)**
1. Epic FHIR integration (sandbox and production)
2. Insurance verification and prior authorization
3. Referrals and specialty consultation workflow
4. Patient portal and communication features

### **Phase 4: Advanced Features (Months 7-8)**
1. Cerner and Athena EMR integration
2. Clinical decision support and quality measures
3. Reporting and analytics dashboard
4. Advanced security audit and compliance tools

### **Phase 5: Production Deployment (Month 9)**
1. Security penetration testing and HIPAA audit
2. Performance optimization for production scale
3. User training and change management
4. Go-live support and monitoring

---

## ‚úÖ **Success Criteria**

1. **Single Source of Truth** - No dual table confusion, one unified encounter model
2. **Clinical Accuracy** - Historical data evolves intelligently, factual data preserves completely
3. **Role Collaboration** - Nurses prepare encounters, providers finalize clinical decisions
4. **GPT Authority** - AI makes all clinical decisions, no frontend medical logic
5. **Performance** - Maintain 60-90 second voice-to-chart updates
6. **Interoperability** - Seamless data exchange with Epic, Cerner, Athena
7. **Compliance** - Full HIPAA compliance with comprehensive audit trails

This architecture transforms your EMR from a technically-indebted documentation system into a clinically-intelligent platform that preserves your innovative voice workflow while providing complete healthcare practice management capabilities!