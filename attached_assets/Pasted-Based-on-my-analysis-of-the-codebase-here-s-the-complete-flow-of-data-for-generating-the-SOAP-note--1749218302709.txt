Based on my analysis of the codebase, here's the complete flow of data for generating the SOAP note after the user presses "stop recording":

SOAP Note Generation Flow
1. User Action: "Stop Recording"

File: client/src/components/MainTranscription.tsx or client/src/components/NurseTranscription.tsx
Function: handleStopRecording()
This function first freezes AI insights to prevent duplicate content, then calls generateSOAPNote()
2. SOAP Note Generation Initiation

File: client/src/components/MainTranscription.tsx (lines ~1000+)
Function: generateSOAPNote()
Process:
Fetches patient chart data via /api/patients/${patientId}/chart
Sets patient chart in WebSocket modules (SOAPNoteModule and DraftOrdersModule)
Prepares detailed SOAP instructions (4000+ character template)
Creates a WebSocket payload with type "response.create"
3. WebSocket Communication

File: client/src/utils/WebSocketClient.ts
Function: sendMessage() or requestSOAPNote()
The client sends the SOAP generation request through WebSocket to OpenAI's real-time API
Payload includes: transcription text, patient chart data, and formatting instructions
4. Real-time Response Handling

File: client/src/utils/WebSocketEventHandler.ts
The WebSocket receives streaming responses from OpenAI
Two key response types:
"response.text.delta" - Incremental SOAP note content
"response.text.done" - Completion signal
5. SOAP Note Module Processing

File: client/src/utils/modules/SOAPNoteModule.ts
Function: handleGptResponse()
Processes streaming deltas and builds the complete SOAP note
When complete, triggers two parallel processes:
CPT code extraction
Draft orders generation
6. Parallel Processing After SOAP Completion

CPT Code Processing:

File: client/src/utils/modules/DiagnosisCPTMapper.ts
Extracts diagnoses from the SOAP note
Maps diagnoses to appropriate CPT codes
Saves to database via /api/diagnosis-cpt/process
Draft Orders Generation:

File: client/src/utils/modules/DraftOrdersModule.ts
Sends another WebSocket request to extract medications, labs, and imaging orders
Parses the response and saves orders via /api/orders/draft
7. Database Persistence

Backend routes handle saving:
SOAP note content to encounters table
CPT codes to separate tables
Draft orders to orders table
Files: server/routes/diagnosis-cpt-routes.ts, server/routes/cpt-codes-routes.ts
Why It's Fast
The speed comes from several optimizations:

Real-time Streaming: OpenAI's real-time API provides incremental updates, so users see the SOAP note being generated live
Parallel Processing: CPT codes and draft orders are processed simultaneously after SOAP completion
WebSocket Efficiency: No HTTP request overhead - maintains persistent connection
Immediate UI Updates: The interface updates in real-time as content streams in
Background Persistence: Database saves happen asynchronously without blocking the UI
The entire flow from "stop recording" to a complete SOAP note with CPT codes and draft orders typically completes in 3-5 seconds due to this streamlined architecture.